

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Jun 07 05:52:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  0011BC                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _control
    43  0011BC  01                 	db	1
    44  0000                     _ANSELA	set	3896
    45  0000                     _ANSELB	set	3897
    46  0000                     _ANSELC	set	3898
    47  0000                     _INTCONbits	set	4082
    48  0000                     _OSCCON	set	4051
    49  0000                     _PORTA	set	3968
    50  0000                     _PORTB	set	3969
    51  0000                     _PORTC	set	3970
    52  0000                     _PORTCbits	set	3970
    53  0000                     _TRISA	set	3986
    54  0000                     _TRISB	set	3987
    55  0000                     _TRISBbits	set	3987
    56  0000                     _TRISC	set	3988
    57  0000                     _LATB1	set	31825
    58  0000                     _LATB2	set	31826
    59                           
    60                           	psect	smallconst
    61  000600                     __psmallconst:
    62                           	opt stack 0
    63  000600                     __stringdata:
    64                           	opt stack 0
    65  000600                     STR_1:
    66  000600  46                 	db	70	;'F'
    67  000601  4C                 	db	76	;'L'
    68  000602  4F                 	db	79	;'O'
    69  000603  57                 	db	87	;'W'
    70  000604  3D                 	db	61	;'='
    71  000605  20                 	db	32
    72  000606  00                 	db	0
    73  000607                     STR_2:
    74  000607  6D                 	db	109	;'m'
    75  000608  6C                 	db	108	;'l'
    76  000609  2F                 	db	47
    77  00060A  68                 	db	104	;'h'
    78  00060B  20                 	db	32
    79  00060C  00                 	db	0
    80  00060D                     __end_of__stringdata:
    81                           	opt stack 0
    82                           
    83                           ; #config settings
    84  00060D  00                 	db	0	; dummy byte at the end
    85  0000                     
    86                           	psect	cinit
    87  00108C                     __pcinit:
    88                           	opt stack 0
    89  00108C                     start_initialization:
    90                           	opt stack 0
    91  00108C                     __initialization:
    92                           	opt stack 0
    93                           
    94                           ; Clear objects allocated to COMRAM (24 bytes)
    95  00108C  EE00  F030         	lfsr	0,__pbssCOMRAM
    96  001090  0E18               	movlw	24
    97  001092                     clear_0:
    98  001092  6AEE               	clrf	postinc0,c
    99  001094  06E8               	decf	wreg,f,c
   100  001096  E1FD               	bnz	clear_0
   101                           
   102                           ; Initialize objects allocated to COMRAM (1 bytes)
   103                           ; load TBLPTR registers with __pidataCOMRAM
   104  001098  0EBC               	movlw	low __pidataCOMRAM
   105  00109A  6EF6               	movwf	tblptrl,c
   106  00109C  0E11               	movlw	high __pidataCOMRAM
   107  00109E  6EF7               	movwf	tblptrh,c
   108  0010A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   109  0010A2  6EF8               	movwf	tblptru,c
   110  0010A4  0009               	tblrd		*+	;fetch initializer
   111  0010A6  CFF5 F048          	movff	tablat,__pdataCOMRAM
   112  0010AA                     end_of_initialization:
   113                           	opt stack 0
   114  0010AA                     __end_of__initialization:
   115                           	opt stack 0
   116  0010AA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   117  0010AC  6EF8               	movwf	tblptru,c
   118  0010AE  0E06               	movlw	high __Lsmallconst
   119  0010B0  6EF7               	movwf	tblptrh,c
   120  0010B2  0100               	movlb	0
   121  0010B4  EF9C  F004         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           tblptrl	equ	0xFF6
   125                           tablat	equ	0xFF5
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	bssCOMRAM
   130  000030                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000030                     _N:
   133                           	opt stack 0
   134  000030                     	ds	3
   135  000033                     _Step_Number:
   136                           	opt stack 0
   137  000033                     	ds	3
   138  000036                     _Syringe_Calibration:
   139                           	opt stack 0
   140  000036                     	ds	3
   141  000039                     _t:
   142                           	opt stack 0
   143  000039                     	ds	3
   144  00003C                     _rate:
   145                           	opt stack 0
   146  00003C                     	ds	2
   147  00003E                     _TENS1:
   148                           	opt stack 0
   149  00003E                     	ds	1
   150  00003F                     _TENTHS1:
   151                           	opt stack 0
   152  00003F                     	ds	1
   153  000040                     _UNITS1:
   154                           	opt stack 0
   155  000040                     	ds	1
   156  000041                     _i:
   157                           	opt stack 0
   158  000041                     	ds	1
   159  000042                     _tens:
   160                           	opt stack 0
   161  000042                     	ds	1
   162  000043                     _tenths:
   163                           	opt stack 0
   164  000043                     	ds	1
   165  000044                     _units:
   166                           	opt stack 0
   167  000044                     	ds	1
   168  000045                     _value:
   169                           	opt stack 0
   170  000045                     	ds	3
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           
   178                           	psect	dataCOMRAM
   179  000048                     __pdataCOMRAM:
   180                           	opt stack 0
   181  000048                     _control:
   182                           	opt stack 0
   183  000048                     	ds	1
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	cstackCOMRAM
   192  000001                     __pcstackCOMRAM:
   193                           	opt stack 0
   194  000001                     ??_INT0_isr:
   195  000001                     
   196                           ; 0 bytes @ 0x0
   197  000001                     	ds	1
   198  000002                     ??_chk_isr:
   199                           
   200                           ; 0 bytes @ 0x1
   201  000002                     	ds	14
   202  000010                     ?_write_8bit_data:
   203                           	opt stack 0
   204  000010                     ?_write_4bit_data:
   205                           	opt stack 0
   206  000010                     ?___ftpack:
   207                           	opt stack 0
   208  000010                     ?___fttol:
   209                           	opt stack 0
   210  000010                     write_8bit_data@data_to_send:
   211                           	opt stack 0
   212  000010                     write_4bit_data@data_to_send:
   213                           	opt stack 0
   214  000010                     Flow_Rate@i:
   215                           	opt stack 0
   216  000010                     ___ftpack@arg:
   217                           	opt stack 0
   218  000010                     ___fttol@f1:
   219                           	opt stack 0
   220                           
   221                           ; 3 bytes @ 0xF
   222  000010                     	ds	1
   223  000011                     ??_write_4bit_data:
   224                           
   225                           ; 0 bytes @ 0x10
   226  000011                     	ds	1
   227  000012                     write_4bit_data@temp:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0x11
   231  000012                     	ds	1
   232  000013                     ??_init_display:
   233  000013                     ?_write_data:
   234                           	opt stack 0
   235  000013                     ?_write_command:
   236                           	opt stack 0
   237  000013                     write_data@data_to_write:
   238                           	opt stack 0
   239  000013                     write_command@command_to_write:
   240                           	opt stack 0
   241  000013                     ___ftpack@exp:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x12
   245  000013                     	ds	1
   246  000014                     ??_write_command:
   247  000014                     ?_send_msg:
   248                           	opt stack 0
   249  000014                     ??___fttol:
   250  000014                     ___ftpack@sign:
   251                           	opt stack 0
   252  000014                     send_msg@text:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x13
   256  000014                     	ds	1
   257  000015                     ??___ftpack:
   258  000015                     ?_set_address_line1:
   259                           	opt stack 0
   260  000015                     ?_set_address_line2:
   261                           	opt stack 0
   262  000015                     set_address_line1@position:
   263                           	opt stack 0
   264  000015                     set_address_line2@position:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x14
   268  000015                     	ds	1
   269  000016                     ??_display:
   270                           
   271                           ; 0 bytes @ 0x15
   272  000016                     	ds	2
   273  000018                     ?___ftdiv:
   274                           	opt stack 0
   275  000018                     ?___ftmul:
   276                           	opt stack 0
   277  000018                     ?___awtoft:
   278                           	opt stack 0
   279  000018                     ?___lbtoft:
   280                           	opt stack 0
   281  000018                     ___lbtoft@c:
   282                           	opt stack 0
   283  000018                     ___awtoft@c:
   284                           	opt stack 0
   285  000018                     ___ftdiv@f1:
   286                           	opt stack 0
   287  000018                     ___ftmul@f1:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x17
   291  000018                     	ds	1
   292  000019                     ___fttol@sign1:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x18
   296  000019                     	ds	1
   297  00001A                     ___fttol@lval:
   298                           	opt stack 0
   299                           
   300                           ; 4 bytes @ 0x19
   301  00001A                     	ds	1
   302  00001B                     ??___awtoft:
   303  00001B                     ??___lbtoft:
   304  00001B                     ___ftdiv@f2:
   305                           	opt stack 0
   306  00001B                     ___ftmul@f2:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0x1A
   310  00001B                     	ds	1
   311  00001C                     ___awtoft@sign:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x1B
   315  00001C                     	ds	1
   316  00001D                     ?___ftadd:
   317                           	opt stack 0
   318  00001D                     ___ftadd@f1:
   319                           	opt stack 0
   320                           
   321                           ; 3 bytes @ 0x1C
   322  00001D                     	ds	1
   323  00001E                     ??___ftdiv:
   324  00001E                     ??___ftmul:
   325  00001E                     ___fttol@exp1:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x1D
   329  00001E                     	ds	2
   330  000020                     ___ftadd@f2:
   331                           	opt stack 0
   332                           
   333                           ; 3 bytes @ 0x1F
   334  000020                     	ds	3
   335  000023                     ??___ftadd:
   336  000023                     ___ftdiv@f3:
   337                           	opt stack 0
   338  000023                     ___ftmul@f3_as_product:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x22
   342  000023                     	ds	3
   343  000026                     ___ftdiv@cntr:
   344                           	opt stack 0
   345  000026                     ___ftmul@exp:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x25
   349  000026                     	ds	1
   350  000027                     ___ftdiv@exp:
   351                           	opt stack 0
   352  000027                     ___ftmul@cntr:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x26
   356  000027                     	ds	1
   357  000028                     ___ftadd@sign:
   358                           	opt stack 0
   359  000028                     ___ftdiv@sign:
   360                           	opt stack 0
   361  000028                     ___ftmul@sign:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x27
   365  000028                     	ds	1
   366  000029                     ?___asftmul:
   367                           	opt stack 0
   368  000029                     ___ftadd@exp2:
   369                           	opt stack 0
   370  000029                     ___asftmul@f1p:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x28
   374  000029                     	ds	1
   375  00002A                     ___ftadd@exp1:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x29
   379  00002A                     	ds	1
   380  00002B                     ___asftmul@f2:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x2A
   384  00002B                     	ds	3
   385  00002E                     ??_caluclation:
   386  00002E                     
   387                           ; 0 bytes @ 0x2D
   388  00002E                     	ds	1
   389  00002F                     ??_main:
   390                           
   391                           ; 0 bytes @ 0x2E
   392  00002F                     	ds	1
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 92 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;		None               void
   412 ;; Registers used:
   413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   419 ;;      Params:         0       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0
   421 ;;      Temps:          1       0       0       0       0       0       0
   422 ;;      Totals:         1       0       0       0       0       0       0
   423 ;;Total ram usage:        1 bytes
   424 ;; Hardware stack levels required when called:    6
   425 ;; This function calls:
   426 ;;		_init_display
   427 ;;		_caluclation
   428 ;;		_Flow_Rate
   429 ;;		_init
   430 ;;		_dec_ASCII
   431 ;;		_display
   432 ;; This function is called by:
   433 ;;		Startup code after reset
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text0
   438  000938                     __ptext0:
   439                           	opt stack 0
   440  000938                     _main:
   441                           	opt stack 25
   442                           
   443                           ;main.c: 94: init();
   444                           
   445                           ;incstack = 0
   446                           ;incstack = 0
   447  000938  EC09  F008         	call	_init	;wreg free
   448                           
   449                           ;main.c: 95: init_display();
   450  00093C  ECD0  F006         	call	_init_display	;wreg free
   451                           
   452                           ;main.c: 99: TENS1=0;
   453  000940  6E2F               	movwf	??_main& (0+255),c
   454  000942  0E00               	movlw	0
   455  000944  6E3E               	movwf	_TENS1,c
   456  000946  502F               	movf	??_main& (0+255),w,c
   457                           
   458                           ;main.c: 100: UNITS1=0;
   459  000948  6E2F               	movwf	??_main& (0+255),c
   460  00094A  0E00               	movlw	0
   461  00094C  6E40               	movwf	_UNITS1,c
   462  00094E  502F               	movf	??_main& (0+255),w,c
   463                           
   464                           ;main.c: 101: TENTHS1=0;
   465  000950  6E2F               	movwf	??_main& (0+255),c
   466  000952  0E00               	movlw	0
   467  000954  6E3F               	movwf	_TENTHS1,c
   468  000956  502F               	movf	??_main& (0+255),w,c
   469  000958                     l1081:
   470                           
   471                           ;main.c: 103: {
   472                           ;main.c: 105: if(!PORTCbits.RC4)
   473  000958  B882               	btfsc	3970,4,c	;volatile
   474  00095A  D019               	goto	l141
   475                           
   476                           ;main.c: 106: {
   477                           ;main.c: 107: TENS1++;
   478  00095C  2A3E               	incf	_TENS1,f,c
   479                           
   480                           ;main.c: 108: if(TENS1 > 9)
   481  00095E  0E09               	movlw	9
   482  000960  643E               	cpfsgt	_TENS1,c
   483  000962  D004               	goto	l142
   484                           
   485                           ;main.c: 109: TENS1 = 0;
   486  000964  6E2F               	movwf	??_main& (0+255),c
   487  000966  0E00               	movlw	0
   488  000968  6E3E               	movwf	_TENS1,c
   489  00096A  502F               	movf	??_main& (0+255),w,c
   490  00096C                     l142:
   491                           
   492                           ;main.c: 110: for(i=0;i<4;i++)
   493  00096C  6E2F               	movwf	??_main& (0+255),c
   494  00096E  0E00               	movlw	0
   495  000970  6E41               	movwf	_i,c
   496  000972  502F               	movf	??_main& (0+255),w,c
   497  000974  D009               	goto	L1
   498  000976                     l1093:
   499                           
   500                           ;main.c: 111: _delay((unsigned long)((10)*(4000000/4000.0)));
   501  000976  0E0D               	movlw	13
   502  000978  6E2F               	movwf	??_main& (0+255),c
   503  00097A  0EFB               	movlw	251
   504  00097C                     u717:
   505  00097C  2EE8               	decfsz	wreg,f,c
   506  00097E  D7FE               	goto	u717
   507  000980  2E2F               	decfsz	??_main& (0+255),f,c
   508  000982  D7FC               	goto	u717
   509  000984  D000               	nop2	
   510  000986  2A41               	incf	_i,f,c
   511  000988                     L1:
   512  000988  0E03               	movlw	3
   513  00098A  6441               	cpfsgt	_i,c
   514  00098C  D7F4               	goto	l1093
   515  00098E                     l141:
   516                           
   517                           ;main.c: 112: }
   518                           ;main.c: 114: if(!PORTCbits.RC5)
   519  00098E  BA82               	btfsc	3970,5,c	;volatile
   520  000990  D019               	goto	l145
   521                           
   522                           ;main.c: 115: {
   523                           ;main.c: 116: UNITS1++;
   524  000992  2A40               	incf	_UNITS1,f,c
   525                           
   526                           ;main.c: 117: if(UNITS1 > 9)
   527  000994  0E09               	movlw	9
   528  000996  6440               	cpfsgt	_UNITS1,c
   529  000998  D004               	goto	l146
   530                           
   531                           ;main.c: 118: UNITS1=0;
   532  00099A  6E2F               	movwf	??_main& (0+255),c
   533  00099C  0E00               	movlw	0
   534  00099E  6E40               	movwf	_UNITS1,c
   535  0009A0  502F               	movf	??_main& (0+255),w,c
   536  0009A2                     l146:
   537                           
   538                           ;main.c: 119: for(i=0;i<4;i++)
   539  0009A2  6E2F               	movwf	??_main& (0+255),c
   540  0009A4  0E00               	movlw	0
   541  0009A6  6E41               	movwf	_i,c
   542  0009A8  502F               	movf	??_main& (0+255),w,c
   543  0009AA  D009               	goto	L2
   544  0009AC                     l1109:
   545                           
   546                           ;main.c: 120: _delay((unsigned long)((10)*(4000000/4000.0)));
   547  0009AC  0E0D               	movlw	13
   548  0009AE  6E2F               	movwf	??_main& (0+255),c
   549  0009B0  0EFB               	movlw	251
   550  0009B2                     u727:
   551  0009B2  2EE8               	decfsz	wreg,f,c
   552  0009B4  D7FE               	goto	u727
   553  0009B6  2E2F               	decfsz	??_main& (0+255),f,c
   554  0009B8  D7FC               	goto	u727
   555  0009BA  D000               	nop2	
   556  0009BC  2A41               	incf	_i,f,c
   557  0009BE                     L2:
   558  0009BE  0E03               	movlw	3
   559  0009C0  6441               	cpfsgt	_i,c
   560  0009C2  D7F4               	goto	l1109
   561  0009C4                     l145:
   562                           
   563                           ;main.c: 121: }
   564                           ;main.c: 123: if(!PORTCbits.RC6)
   565  0009C4  BC82               	btfsc	3970,6,c	;volatile
   566  0009C6  D019               	goto	l149
   567                           
   568                           ;main.c: 124: {
   569                           ;main.c: 125: TENTHS1++;
   570  0009C8  2A3F               	incf	_TENTHS1,f,c
   571                           
   572                           ;main.c: 126: if(TENTHS1 > 9)
   573  0009CA  0E09               	movlw	9
   574  0009CC  643F               	cpfsgt	_TENTHS1,c
   575  0009CE  D004               	goto	l150
   576                           
   577                           ;main.c: 127: TENTHS1=0;
   578  0009D0  6E2F               	movwf	??_main& (0+255),c
   579  0009D2  0E00               	movlw	0
   580  0009D4  6E3F               	movwf	_TENTHS1,c
   581  0009D6  502F               	movf	??_main& (0+255),w,c
   582  0009D8                     l150:
   583                           
   584                           ;main.c: 128: for(i=0;i<4;i++)
   585  0009D8  6E2F               	movwf	??_main& (0+255),c
   586  0009DA  0E00               	movlw	0
   587  0009DC  6E41               	movwf	_i,c
   588  0009DE  502F               	movf	??_main& (0+255),w,c
   589  0009E0  D009               	goto	L3
   590  0009E2                     l1125:
   591                           
   592                           ;main.c: 129: _delay((unsigned long)((10)*(4000000/4000.0)));
   593  0009E2  0E0D               	movlw	13
   594  0009E4  6E2F               	movwf	??_main& (0+255),c
   595  0009E6  0EFB               	movlw	251
   596  0009E8                     u737:
   597  0009E8  2EE8               	decfsz	wreg,f,c
   598  0009EA  D7FE               	goto	u737
   599  0009EC  2E2F               	decfsz	??_main& (0+255),f,c
   600  0009EE  D7FC               	goto	u737
   601  0009F0  D000               	nop2	
   602  0009F2  2A41               	incf	_i,f,c
   603  0009F4                     L3:
   604  0009F4  0E03               	movlw	3
   605  0009F6  6441               	cpfsgt	_i,c
   606  0009F8  D7F4               	goto	l1125
   607  0009FA                     l149:
   608                           
   609                           ;main.c: 130: }
   610                           ;main.c: 132: if((!PORTCbits.RC7) && (TENS1 || UNITS1 || TENTHS1))
   611  0009FA  BE82               	btfsc	3970,7,c	;volatile
   612  0009FC  D01D               	goto	l1153
   613  0009FE  663E               	tstfsz	_TENS1,c
   614  000A00  D005               	goto	l1137
   615  000A02  6640               	tstfsz	_UNITS1,c
   616  000A04  D003               	goto	l1137
   617  000A06  503F               	movf	_TENTHS1,w,c
   618  000A08  B4D8               	btfsc	status,2,c
   619  000A0A  D016               	goto	l1153
   620  000A0C                     l1137:
   621                           
   622                           ;main.c: 133: {
   623                           ;main.c: 134: caluclation ();
   624  000A0C  ECED  F003         	call	_caluclation	;wreg free
   625                           
   626                           ;main.c: 135: while (control==1)
   627  000A10  D010               	goto	l1151
   628  000A12                     l1139:
   629                           
   630                           ;main.c: 136: {
   631                           ;main.c: 138: PORTC=0x09;
   632  000A12  0E09               	movlw	9
   633  000A14  6E82               	movwf	3970,c	;volatile
   634                           
   635                           ;main.c: 139: Flow_Rate ();
   636  000A16  EC87  F008         	call	_Flow_Rate	;wreg free
   637                           
   638                           ;main.c: 140: PORTC=0x0C;
   639  000A1A  0E0C               	movlw	12
   640  000A1C  6E82               	movwf	3970,c	;volatile
   641                           
   642                           ;main.c: 141: Flow_Rate ();
   643  000A1E  EC87  F008         	call	_Flow_Rate	;wreg free
   644                           
   645                           ;main.c: 142: PORTC=0x06;
   646  000A22  0E06               	movlw	6
   647  000A24  6E82               	movwf	3970,c	;volatile
   648                           
   649                           ;main.c: 143: Flow_Rate ();
   650  000A26  EC87  F008         	call	_Flow_Rate	;wreg free
   651                           
   652                           ;main.c: 144: PORTC=0x03;
   653  000A2A  0E03               	movlw	3
   654  000A2C  6E82               	movwf	3970,c	;volatile
   655                           
   656                           ;main.c: 145: Flow_Rate ();
   657  000A2E  EC87  F008         	call	_Flow_Rate	;wreg free
   658  000A32                     l1151:
   659  000A32  0448               	decf	_control,w,c
   660  000A34  B4D8               	btfsc	status,2,c
   661  000A36  D7ED               	goto	l1139
   662  000A38                     l1153:
   663                           
   664                           ;main.c: 146: }
   665                           ;main.c: 148: }
   666                           ;main.c: 149: dec_ASCII();
   667  000A38  ECBC  F008         	call	_dec_ASCII	;wreg free
   668                           
   669                           ;main.c: 150: display();
   670  000A3C  EC8C  F007         	call	_display	;wreg free
   671                           
   672                           ;main.c: 151: _delay((unsigned long)((150)*(4000000/4000.0)));
   673  000A40  0EC3               	movlw	195
   674  000A42  6E2F               	movwf	??_main& (0+255),c
   675  000A44  0ECD               	movlw	205
   676  000A46                     u747:
   677  000A46  2EE8               	decfsz	wreg,f,c
   678  000A48  D7FE               	goto	u747
   679  000A4A  2E2F               	decfsz	??_main& (0+255),f,c
   680  000A4C  D7FC               	goto	u747
   681                           
   682                           ;main.c: 152: for(i=0;i<6;i++)
   683  000A4E  6E2F               	movwf	??_main& (0+255),c
   684  000A50  0E00               	movlw	0
   685  000A52  6E41               	movwf	_i,c
   686  000A54  502F               	movf	??_main& (0+255),w,c
   687  000A56  0E05               	movlw	5
   688  000A58  6441               	cpfsgt	_i,c
   689  000A5A  D001               	goto	l1165
   690  000A5C  D77D               	goto	l1081
   691  000A5E                     l1165:
   692                           
   693                           ;main.c: 153: _delay((unsigned long)((10)*(4000000/4000.0)));
   694  000A5E  0E0D               	movlw	13
   695  000A60  6E2F               	movwf	??_main& (0+255),c
   696  000A62  0EFB               	movlw	251
   697  000A64                     u757:
   698  000A64  2EE8               	decfsz	wreg,f,c
   699  000A66  D7FE               	goto	u757
   700  000A68  2E2F               	decfsz	??_main& (0+255),f,c
   701  000A6A  D7FC               	goto	u757
   702  000A6C  D000               	nop2	
   703  000A6E  2A41               	incf	_i,f,c
   704  000A70  0E05               	movlw	5
   705  000A72  6441               	cpfsgt	_i,c
   706  000A74  D7F4               	goto	l1165
   707  000A76  D770               	goto	l1081
   708  000A78                     __end_of_main:
   709                           	opt stack 0
   710                           tblptru	equ	0xFF8
   711                           tblptrh	equ	0xFF7
   712                           tblptrl	equ	0xFF6
   713                           tablat	equ	0xFF5
   714                           postinc0	equ	0xFEE
   715                           wreg	equ	0xFE8
   716                           status	equ	0xFD8
   717                           
   718 ;; *************** function _display *****************
   719 ;; Defined at:
   720 ;;		line 78 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;		None               void
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   734 ;;      Params:         0       0       0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0       0       0
   736 ;;      Temps:          1       0       0       0       0       0       0
   737 ;;      Totals:         1       0       0       0       0       0       0
   738 ;;Total ram usage:        1 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    5
   741 ;; This function calls:
   742 ;;		_write_data
   743 ;;		_set_address_line1
   744 ;;		_set_address_line2
   745 ;;		_send_msg
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text1
   752  000F18                     __ptext1:
   753                           	opt stack 0
   754  000F18                     _display:
   755                           	opt stack 25
   756                           
   757                           ;main.c: 79: set_address_line1(1);
   758                           
   759                           ;incstack = 0
   760                           ;incstack = 0
   761  000F18  6E16               	movwf	??_display& (0+255),c
   762  000F1A  0E01               	movlw	1
   763  000F1C  6E15               	movwf	?_set_address_line1,c
   764  000F1E  5016               	movf	??_display& (0+255),w,c
   765  000F20  ECB2  F008         	call	_set_address_line1	;wreg free
   766                           
   767                           ;main.c: 80: send_msg("FLOW= ");
   768  000F24  0E06               	movlw	high STR_1
   769  000F26  6E15               	movwf	?_send_msg+1,c
   770  000F28  0E00               	movlw	low STR_1
   771  000F2A  6E14               	movwf	?_send_msg,c
   772  000F2C  EC5C  F008         	call	_send_msg	;wreg free
   773                           
   774                           ;main.c: 81: set_address_line2(1);
   775  000F30  6E16               	movwf	??_display& (0+255),c
   776  000F32  0E01               	movlw	1
   777  000F34  6E15               	movwf	?_set_address_line2,c
   778  000F36  5016               	movf	??_display& (0+255),w,c
   779  000F38  ECA8  F008         	call	_set_address_line2	;wreg free
   780                           
   781                           ;main.c: 82: write_data(tens);
   782  000F3C  C042  F013         	movff	_tens,?_write_data
   783  000F40  ECD7  F008         	call	_write_data	;wreg free
   784                           
   785                           ;main.c: 83: write_data(units);
   786  000F44  C044  F013         	movff	_units,?_write_data
   787  000F48  ECD7  F008         	call	_write_data	;wreg free
   788                           
   789                           ;main.c: 84: write_data('.');
   790  000F4C  6E16               	movwf	??_display& (0+255),c
   791  000F4E  0E2E               	movlw	46
   792  000F50  6E13               	movwf	?_write_data,c
   793  000F52  5016               	movf	??_display& (0+255),w,c
   794  000F54  ECD7  F008         	call	_write_data	;wreg free
   795                           
   796                           ;main.c: 85: write_data(tenths);
   797  000F58  C043  F013         	movff	_tenths,?_write_data
   798  000F5C  ECD7  F008         	call	_write_data	;wreg free
   799                           
   800                           ;main.c: 86: set_address_line2(6);
   801  000F60  6E16               	movwf	??_display& (0+255),c
   802  000F62  0E06               	movlw	6
   803  000F64  6E15               	movwf	?_set_address_line2,c
   804  000F66  5016               	movf	??_display& (0+255),w,c
   805  000F68  ECA8  F008         	call	_set_address_line2	;wreg free
   806                           
   807                           ;main.c: 87: send_msg("ml/h ");
   808  000F6C  0E06               	movlw	high STR_2
   809  000F6E  6E15               	movwf	?_send_msg+1,c
   810  000F70  0E07               	movlw	low STR_2
   811  000F72  6E14               	movwf	?_send_msg,c
   812  000F74  EC5C  F008         	call	_send_msg	;wreg free
   813  000F78  0012               	return	
   814  000F7A                     __end_of_display:
   815                           	opt stack 0
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           status	equ	0xFD8
   823                           
   824 ;; *************** function _send_msg *****************
   825 ;; Defined at:
   826 ;;		line 82 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  text            2   19[COMRAM] PTR const unsigned char 
   829 ;;		 -> STR_2(6), STR_1(7), 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;		None               void
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   841 ;;      Params:         2       0       0       0       0       0       0
   842 ;;      Locals:         0       0       0       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0       0       0
   844 ;;      Totals:         2       0       0       0       0       0       0
   845 ;;Total ram usage:        2 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    4
   848 ;; This function calls:
   849 ;;		_write_data
   850 ;; This function is called by:
   851 ;;		_display
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           	psect	text2
   856  0010B8                     __ptext2:
   857                           	opt stack 0
   858  0010B8                     _send_msg:
   859                           	opt stack 25
   860                           
   861                           ;LCD.c: 83: while(*text)
   862                           
   863                           ;incstack = 0
   864                           ;incstack = 0
   865  0010B8  D00B               	goto	l1009
   866  0010BA                     l1005:
   867                           
   868                           ;LCD.c: 84: write_data(*text++);
   869  0010BA  C014  FFF6         	movff	send_msg@text,tblptrl
   870  0010BE  C015  FFF7         	movff	send_msg@text+1,tblptrh
   871  0010C2  0008               	tblrd		*
   872  0010C4  CFF5 F013          	movff	tablat,?_write_data
   873  0010C8  ECD7  F008         	call	_write_data	;wreg free
   874  0010CC  4A14               	infsnz	send_msg@text,f,c
   875  0010CE  2A15               	incf	send_msg@text+1,f,c
   876  0010D0                     l1009:
   877  0010D0  C014  FFF6         	movff	send_msg@text,tblptrl
   878  0010D4  C015  FFF7         	movff	send_msg@text+1,tblptrh
   879  0010D8  0008               	tblrd		*
   880  0010DA  50F5               	movf	tablat,w,c
   881  0010DC  0900               	iorlw	0
   882  0010DE  B4D8               	btfsc	status,2,c
   883  0010E0  0012               	return	
   884  0010E2  D7EB               	goto	l1005
   885  0010E4                     __end_of_send_msg:
   886                           	opt stack 0
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           status	equ	0xFD8
   894                           
   895 ;; *************** function _write_data *****************
   896 ;; Defined at:
   897 ;;		line 53 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  data_to_writ    1   18[COMRAM] unsigned char 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;		None               void
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   911 ;;      Params:         1       0       0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0
   914 ;;      Totals:         1       0       0       0       0       0       0
   915 ;;Total ram usage:        1 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    3
   918 ;; This function calls:
   919 ;;		_write_4bit_data
   920 ;; This function is called by:
   921 ;;		_send_msg
   922 ;;		_display
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           	psect	text3
   927  0011AE                     __ptext3:
   928                           	opt stack 0
   929  0011AE                     _write_data:
   930                           	opt stack 25
   931                           
   932                           ;LCD.c: 54: LATB2=1;
   933                           
   934                           ;incstack = 0
   935                           ;incstack = 0
   936  0011AE  848A               	bsf	3978,2,c	;volatile
   937                           
   938                           ;LCD.c: 55: write_4bit_data(data_to_write);
   939  0011B0  C013  F010         	movff	write_data@data_to_write,?_write_4bit_data
   940  0011B4  ECBD  F007         	call	_write_4bit_data	;wreg free
   941                           
   942                           ;LCD.c: 56: LATB2=0;
   943  0011B8  948A               	bcf	3978,2,c	;volatile
   944  0011BA  0012               	return	
   945  0011BC                     __end_of_write_data:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function _set_address_line2 *****************
   956 ;; Defined at:
   957 ;;		line 71 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  position        1   20[COMRAM] unsigned char 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;		None               void
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   971 ;;      Params:         1       0       0       0       0       0       0
   972 ;;      Locals:         0       0       0       0       0       0       0
   973 ;;      Temps:          0       0       0       0       0       0       0
   974 ;;      Totals:         1       0       0       0       0       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    4
   978 ;; This function calls:
   979 ;;		_write_command
   980 ;; This function is called by:
   981 ;;		_display
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text4
   986  001150                     __ptext4:
   987                           	opt stack 0
   988  001150                     _set_address_line2:
   989                           	opt stack 25
   990                           
   991                           ;LCD.c: 72: write_command(0xBF + position);
   992                           
   993                           ;incstack = 0
   994                           ;incstack = 0
   995  001150  5015               	movf	set_address_line2@position,w,c
   996  001152  0FBF               	addlw	191
   997  001154  6E13               	movwf	?_write_command,c
   998  001156  EC99  F008         	call	_write_command	;wreg free
   999                           
  1000                           ;LCD.c: 73: _delay((unsigned long)((1)*(4000000/4000.0)));
  1001  00115A  0EFA               	movlw	250
  1002  00115C                     u767:
  1003  00115C  F000               	nop	
  1004  00115E  2EE8               	decfsz	wreg,f,c
  1005  001160  D7FD               	goto	u767
  1006  001162  0012               	return	
  1007  001164                     __end_of_set_address_line2:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           status	equ	0xFD8
  1016                           
  1017 ;; *************** function _set_address_line1 *****************
  1018 ;; Defined at:
  1019 ;;		line 66 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  position        1   20[COMRAM] unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1033 ;;      Params:         1       0       0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0       0       0
  1036 ;;      Totals:         1       0       0       0       0       0       0
  1037 ;;Total ram usage:        1 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    4
  1040 ;; This function calls:
  1041 ;;		_write_command
  1042 ;; This function is called by:
  1043 ;;		_display
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text5
  1048  001164                     __ptext5:
  1049                           	opt stack 0
  1050  001164                     _set_address_line1:
  1051                           	opt stack 25
  1052                           
  1053                           ;LCD.c: 67: write_command(0x7F + position);
  1054                           
  1055                           ;incstack = 0
  1056                           ;incstack = 0
  1057  001164  5015               	movf	set_address_line1@position,w,c
  1058  001166  0F7F               	addlw	127
  1059  001168  6E13               	movwf	?_write_command,c
  1060  00116A  EC99  F008         	call	_write_command	;wreg free
  1061                           
  1062                           ;LCD.c: 68: _delay((unsigned long)((1)*(4000000/4000.0)));
  1063  00116E  0EFA               	movlw	250
  1064  001170                     u777:
  1065  001170  F000               	nop	
  1066  001172  2EE8               	decfsz	wreg,f,c
  1067  001174  D7FD               	goto	u777
  1068  001176  0012               	return	
  1069  001178                     __end_of_set_address_line1:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           status	equ	0xFD8
  1078                           
  1079 ;; *************** function _write_command *****************
  1080 ;; Defined at:
  1081 ;;		line 59 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  command_to_w    1   18[COMRAM] unsigned char 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;		None               void
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1095 ;;      Params:         1       0       0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0
  1097 ;;      Temps:          1       0       0       0       0       0       0
  1098 ;;      Totals:         2       0       0       0       0       0       0
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    3
  1102 ;; This function calls:
  1103 ;;		_write_4bit_data
  1104 ;; This function is called by:
  1105 ;;		_set_address_line1
  1106 ;;		_set_address_line2
  1107 ;;		_clear_display
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text6
  1112  001132                     __ptext6:
  1113                           	opt stack 0
  1114  001132                     _write_command:
  1115                           	opt stack 25
  1116                           
  1117                           ;LCD.c: 60: LATB2=0;
  1118                           
  1119                           ;incstack = 0
  1120                           ;incstack = 0
  1121  001132  948A               	bcf	3978,2,c	;volatile
  1122                           
  1123                           ;LCD.c: 61: write_4bit_data(command_to_write);
  1124  001134  C013  F010         	movff	write_command@command_to_write,?_write_4bit_data
  1125  001138  ECBD  F007         	call	_write_4bit_data	;wreg free
  1126                           
  1127                           ;LCD.c: 62: _delay((unsigned long)((2)*(4000000/4000.0)));
  1128  00113C  0E03               	movlw	3
  1129  00113E  6E14               	movwf	??_write_command& (0+255),c
  1130  001140  0E97               	movlw	151
  1131  001142                     u787:
  1132  001142  2EE8               	decfsz	wreg,f,c
  1133  001144  D7FE               	goto	u787
  1134  001146  2E14               	decfsz	??_write_command& (0+255),f,c
  1135  001148  D7FC               	goto	u787
  1136  00114A  D000               	nop2	
  1137                           
  1138                           ;LCD.c: 63: LATB2=1;
  1139  00114C  848A               	bsf	3978,2,c	;volatile
  1140  00114E  0012               	return	
  1141  001150                     __end_of_write_command:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           status	equ	0xFD8
  1150                           
  1151 ;; *************** function _dec_ASCII *****************
  1152 ;; Defined at:
  1153 ;;		line 71 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;		None
  1158 ;; Return value:  Size  Location     Type
  1159 ;;		None               void
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1167 ;;      Params:         0       0       0       0       0       0       0
  1168 ;;      Locals:         0       0       0       0       0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0
  1170 ;;      Totals:         0       0       0       0       0       0       0
  1171 ;;Total ram usage:        0 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    2
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text7
  1182  001178                     __ptext7:
  1183                           	opt stack 0
  1184  001178                     _dec_ASCII:
  1185                           	opt stack 28
  1186                           
  1187                           ;main.c: 72: tens=(TENS1/1)+0x30;
  1188                           
  1189                           ;incstack = 0
  1190                           ;incstack = 0
  1191  001178  503E               	movf	_TENS1,w,c
  1192  00117A  0F30               	addlw	48
  1193  00117C  6E42               	movwf	_tens,c
  1194                           
  1195                           ;main.c: 73: units=(UNITS1/1)+0x30;
  1196  00117E  5040               	movf	_UNITS1,w,c
  1197  001180  0F30               	addlw	48
  1198  001182  6E44               	movwf	_units,c
  1199                           
  1200                           ;main.c: 74: tenths=(TENTHS1/1)+0x30;
  1201  001184  503F               	movf	_TENTHS1,w,c
  1202  001186  0F30               	addlw	48
  1203  001188  6E43               	movwf	_tenths,c
  1204  00118A  0012               	return	
  1205  00118C                     __end_of_dec_ASCII:
  1206                           	opt stack 0
  1207                           tblptru	equ	0xFF8
  1208                           tblptrh	equ	0xFF7
  1209                           tblptrl	equ	0xFF6
  1210                           tablat	equ	0xFF5
  1211                           postinc0	equ	0xFEE
  1212                           wreg	equ	0xFE8
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _init *****************
  1216 ;; Defined at:
  1217 ;;		line 53 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;		None               void
  1224 ;; Registers used:
  1225 ;;		wreg, status,2
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1231 ;;      Params:         0       0       0       0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    2
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text8
  1246  001012                     __ptext8:
  1247                           	opt stack 0
  1248  001012                     _init:
  1249                           	opt stack 28
  1250                           
  1251                           ;main.c: 55: OSCCON=0b01010010;
  1252                           
  1253                           ;incstack = 0
  1254                           ;incstack = 0
  1255  001012  0E52               	movlw	82
  1256  001014  6ED3               	movwf	4051,c	;volatile
  1257                           
  1258                           ;main.c: 56: ANSELC=0x00;
  1259  001016  0E00               	movlw	0
  1260  001018  010F               	movlb	15	; () banked
  1261  00101A  010F               	movlb	15	; () banked
  1262  00101C  6F3A               	movwf	58,b	;volatile
  1263                           
  1264                           ;main.c: 57: TRISC=0xF0;
  1265  00101E  0EF0               	movlw	240
  1266  001020  6E94               	movwf	3988,c	;volatile
  1267                           
  1268                           ;main.c: 58: PORTC=0x00;
  1269  001022  0E00               	movlw	0
  1270  001024  6E82               	movwf	3970,c	;volatile
  1271                           
  1272                           ;main.c: 59: ANSELB=0x00;
  1273  001026  0E00               	movlw	0
  1274  001028  010F               	movlb	15	; () banked
  1275  00102A  010F               	movlb	15	; () banked
  1276  00102C  6F39               	movwf	57,b	;volatile
  1277                           
  1278                           ;main.c: 60: TRISB=0x01;
  1279  00102E  0E01               	movlw	1
  1280  001030  6E93               	movwf	3987,c	;volatile
  1281                           
  1282                           ;main.c: 61: PORTB=0x00;
  1283  001032  0E00               	movlw	0
  1284  001034  6E81               	movwf	3969,c	;volatile
  1285                           
  1286                           ;main.c: 62: TRISA=0x0F;
  1287  001036  0E0F               	movlw	15
  1288  001038  6E92               	movwf	3986,c	;volatile
  1289                           
  1290                           ;main.c: 63: ANSELA=0x00;
  1291  00103A  0E00               	movlw	0
  1292  00103C  010F               	movlb	15	; () banked
  1293  00103E  010F               	movlb	15	; () banked
  1294  001040  6F38               	movwf	56,b	;volatile
  1295                           
  1296                           ;main.c: 64: PORTA=0x00;
  1297  001042  0E00               	movlw	0
  1298  001044  6E80               	movwf	3968,c	;volatile
  1299                           
  1300                           ; BSR set to: 15
  1301                           ;main.c: 65: TRISBbits.TRISB0=1;
  1302  001046  8093               	bsf	3987,0,c	;volatile
  1303                           
  1304                           ; BSR set to: 15
  1305                           ;main.c: 66: INTCONbits.INT0IF=0;
  1306  001048  92F2               	bcf	intcon,1,c	;volatile
  1307                           
  1308                           ; BSR set to: 15
  1309                           ;main.c: 67: INTCONbits.INT0IE=1;
  1310  00104A  88F2               	bsf	intcon,4,c	;volatile
  1311                           
  1312                           ; BSR set to: 15
  1313                           ;main.c: 68: INTCONbits.GIE=1;
  1314  00104C  8EF2               	bsf	intcon,7,c	;volatile
  1315                           
  1316                           ; BSR set to: 15
  1317  00104E  0012               	return	
  1318  001050                     __end_of_init:
  1319                           	opt stack 0
  1320                           tblptru	equ	0xFF8
  1321                           tblptrh	equ	0xFF7
  1322                           tblptrl	equ	0xFF6
  1323                           tablat	equ	0xFF5
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _Flow_Rate *****************
  1330 ;; Defined at:
  1331 ;;		line 38 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  i               2   15[COMRAM] unsigned int 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, status,2, status,0
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1345 ;;      Params:         0       0       0       0       0       0       0
  1346 ;;      Locals:         2       0       0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0
  1348 ;;      Totals:         2       0       0       0       0       0       0
  1349 ;;Total ram usage:        2 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    2
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text9
  1360  00110E                     __ptext9:
  1361                           	opt stack 0
  1362  00110E                     _Flow_Rate:
  1363                           	opt stack 28
  1364                           
  1365                           ;main.c: 39: for(unsigned int i=0;i<rate;i++){
  1366                           
  1367                           ; BSR set to: 15
  1368                           ;incstack = 0
  1369                           ;incstack = 0
  1370  00110E  0E00               	movlw	0
  1371  001110  6E11               	movwf	Flow_Rate@i+1,c
  1372  001112  0E00               	movlw	0
  1373  001114  6E10               	movwf	Flow_Rate@i,c
  1374  001116  D006               	goto	l122
  1375  001118                     l1037:
  1376                           
  1377                           ;main.c: 40: _delay((unsigned long)((1)*(4000000/4000.0)));
  1378  001118  0EFA               	movlw	250
  1379  00111A                     u797:
  1380  00111A  F000               	nop	
  1381  00111C  2EE8               	decfsz	wreg,f,c
  1382  00111E  D7FD               	goto	u797
  1383  001120  4A10               	infsnz	Flow_Rate@i,f,c
  1384  001122  2A11               	incf	Flow_Rate@i+1,f,c
  1385  001124                     l122:
  1386  001124  503C               	movf	_rate,w,c
  1387  001126  5C10               	subwf	Flow_Rate@i,w,c
  1388  001128  503D               	movf	_rate+1,w,c
  1389  00112A  5811               	subwfb	Flow_Rate@i+1,w,c
  1390  00112C  B0D8               	btfsc	status,0,c
  1391  00112E  0012               	return	
  1392  001130  D7F3               	goto	l1037
  1393  001132                     __end_of_Flow_Rate:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _caluclation *****************
  1405 ;; Defined at:
  1406 ;;		line 24 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;		None               void
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1420 ;;      Params:         0       0       0       0       0       0       0
  1421 ;;      Locals:         0       0       0       0       0       0       0
  1422 ;;      Temps:          1       0       0       0       0       0       0
  1423 ;;      Totals:         1       0       0       0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    5
  1427 ;; This function calls:
  1428 ;;		___ftadd
  1429 ;;		___ftdiv
  1430 ;;		___asftmul
  1431 ;;		___ftmul
  1432 ;;		___awtoft
  1433 ;;		___fttol
  1434 ;;		___lbtoft
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text10
  1441  0007DA                     __ptext10:
  1442                           	opt stack 0
  1443  0007DA                     _caluclation:
  1444                           	opt stack 25
  1445                           
  1446                           ;main.c: 25: N=TENTHS1;
  1447                           
  1448                           ;incstack = 0
  1449                           ;incstack = 0
  1450  0007DA  C03F  F018         	movff	_TENTHS1,?___lbtoft
  1451  0007DE  EC72  F008         	call	___lbtoft	;wreg free
  1452  0007E2  C01A  F032         	movff	?___lbtoft+2,_N+2
  1453  0007E6  C019  F031         	movff	?___lbtoft+1,_N+1
  1454  0007EA  C018  F030         	movff	?___lbtoft,_N
  1455                           
  1456                           ;main.c: 26: N=N/10;
  1457  0007EE  C030  F018         	movff	_N,?___ftdiv
  1458  0007F2  C031  F019         	movff	_N+1,?___ftdiv+1
  1459  0007F6  C032  F01A         	movff	_N+2,?___ftdiv+2
  1460  0007FA  0E00               	movlw	0
  1461  0007FC  6E1B               	movwf	?___ftdiv+3,c
  1462  0007FE  0E20               	movlw	32
  1463  000800  6E1C               	movwf	?___ftdiv+4,c
  1464  000802  0E41               	movlw	65
  1465  000804  6E1D               	movwf	?___ftdiv+5,c
  1466  000806  ECCA  F005         	call	___ftdiv	;wreg free
  1467  00080A  C01A  F032         	movff	?___ftdiv+2,_N+2
  1468  00080E  C019  F031         	movff	?___ftdiv+1,_N+1
  1469  000812  C018  F030         	movff	?___ftdiv,_N
  1470                           
  1471                           ;main.c: 27: value=(TENS1*10)+UNITS1+N;
  1472  000816  503E               	movf	_TENS1,w,c
  1473  000818  0D0A               	mullw	10
  1474  00081A  5040               	movf	_UNITS1,w,c
  1475  00081C  24F3               	addwf	prodl,w,c
  1476  00081E  6E18               	movwf	?___awtoft,c
  1477  000820  0E00               	movlw	0
  1478  000822  20F4               	addwfc	prodh,w,c
  1479  000824  6E19               	movwf	?___awtoft+1,c
  1480  000826  ECE7  F007         	call	___awtoft	;wreg free
  1481  00082A  C01A  F01F         	movff	?___awtoft+2,?___ftadd+2
  1482  00082E  C019  F01E         	movff	?___awtoft+1,?___ftadd+1
  1483  000832  C018  F01D         	movff	?___awtoft,?___ftadd
  1484  000836  C030  F020         	movff	_N,?___ftadd+3
  1485  00083A  C031  F021         	movff	_N+1,?___ftadd+4
  1486  00083E  C032  F022         	movff	_N+2,?___ftadd+5
  1487  000842  EC07  F003         	call	___ftadd	;wreg free
  1488  000846  C01F  F047         	movff	?___ftadd+2,_value+2
  1489  00084A  C01E  F046         	movff	?___ftadd+1,_value+1
  1490  00084E  C01D  F045         	movff	?___ftadd,_value
  1491                           
  1492                           ;main.c: 28: Step_Number=48*64;
  1493  000852  0E00               	movlw	0
  1494  000854  6E33               	movwf	_Step_Number,c
  1495  000856  0E40               	movlw	64
  1496  000858  6E34               	movwf	_Step_Number+1,c
  1497  00085A  0E45               	movlw	69
  1498  00085C  6E35               	movwf	_Step_Number+2,c
  1499                           
  1500                           ;main.c: 29: Syringe_Calibration=Step_Number*1.8;
  1501  00085E  C033  F018         	movff	_Step_Number,?___ftmul
  1502  000862  C034  F019         	movff	_Step_Number+1,?___ftmul+1
  1503  000866  C035  F01A         	movff	_Step_Number+2,?___ftmul+2
  1504  00086A  0E66               	movlw	102
  1505  00086C  6E1B               	movwf	?___ftmul+3,c
  1506  00086E  0EE6               	movlw	230
  1507  000870  6E1C               	movwf	?___ftmul+4,c
  1508  000872  0E3F               	movlw	63
  1509  000874  6E1D               	movwf	?___ftmul+5,c
  1510  000876  EC3C  F005         	call	___ftmul	;wreg free
  1511  00087A  C01A  F038         	movff	?___ftmul+2,_Syringe_Calibration+2
  1512  00087E  C019  F037         	movff	?___ftmul+1,_Syringe_Calibration+1
  1513  000882  C018  F036         	movff	?___ftmul,_Syringe_Calibration
  1514                           
  1515                           ;main.c: 30: Syringe_Calibration= Syringe_Calibration/3600;
  1516  000886  C036  F018         	movff	_Syringe_Calibration,?___ftdiv
  1517  00088A  C037  F019         	movff	_Syringe_Calibration+1,?___ftdiv+1
  1518  00088E  C038  F01A         	movff	_Syringe_Calibration+2,?___ftdiv+2
  1519  000892  0E00               	movlw	0
  1520  000894  6E1B               	movwf	?___ftdiv+3,c
  1521  000896  0E61               	movlw	97
  1522  000898  6E1C               	movwf	?___ftdiv+4,c
  1523  00089A  0E45               	movlw	69
  1524  00089C  6E1D               	movwf	?___ftdiv+5,c
  1525  00089E  ECCA  F005         	call	___ftdiv	;wreg free
  1526  0008A2  C01A  F038         	movff	?___ftdiv+2,_Syringe_Calibration+2
  1527  0008A6  C019  F037         	movff	?___ftdiv+1,_Syringe_Calibration+1
  1528  0008AA  C018  F036         	movff	?___ftdiv,_Syringe_Calibration
  1529                           
  1530                           ;main.c: 31: value*=Syringe_Calibration;
  1531  0008AE  0E00               	movlw	high _value
  1532  0008B0  6E2A               	movwf	?___asftmul+1,c
  1533  0008B2  0E45               	movlw	low _value
  1534  0008B4  6E29               	movwf	?___asftmul,c
  1535  0008B6  C036  F02B         	movff	_Syringe_Calibration,?___asftmul+2
  1536  0008BA  C037  F02C         	movff	_Syringe_Calibration+1,?___asftmul+3
  1537  0008BE  C038  F02D         	movff	_Syringe_Calibration+2,?___asftmul+4
  1538  0008C2  EC28  F008         	call	___asftmul	;wreg free
  1539                           
  1540                           ;main.c: 32: t=1000/value;
  1541  0008C6  0E00               	movlw	0
  1542  0008C8  6E18               	movwf	?___ftdiv,c
  1543  0008CA  0E7A               	movlw	122
  1544  0008CC  6E19               	movwf	?___ftdiv+1,c
  1545  0008CE  0E44               	movlw	68
  1546  0008D0  6E1A               	movwf	?___ftdiv+2,c
  1547  0008D2  C045  F01B         	movff	_value,?___ftdiv+3
  1548  0008D6  C046  F01C         	movff	_value+1,?___ftdiv+4
  1549  0008DA  C047  F01D         	movff	_value+2,?___ftdiv+5
  1550  0008DE  ECCA  F005         	call	___ftdiv	;wreg free
  1551  0008E2  C01A  F03B         	movff	?___ftdiv+2,_t+2
  1552  0008E6  C019  F03A         	movff	?___ftdiv+1,_t+1
  1553  0008EA  C018  F039         	movff	?___ftdiv,_t
  1554                           
  1555                           ;main.c: 33: t=t+0.5;
  1556  0008EE  C039  F01D         	movff	_t,?___ftadd
  1557  0008F2  C03A  F01E         	movff	_t+1,?___ftadd+1
  1558  0008F6  C03B  F01F         	movff	_t+2,?___ftadd+2
  1559  0008FA  0E00               	movlw	0
  1560  0008FC  6E20               	movwf	?___ftadd+3,c
  1561  0008FE  0E00               	movlw	0
  1562  000900  6E21               	movwf	?___ftadd+4,c
  1563  000902  0E3F               	movlw	63
  1564  000904  6E22               	movwf	?___ftadd+5,c
  1565  000906  EC07  F003         	call	___ftadd	;wreg free
  1566  00090A  C01F  F03B         	movff	?___ftadd+2,_t+2
  1567  00090E  C01E  F03A         	movff	?___ftadd+1,_t+1
  1568  000912  C01D  F039         	movff	?___ftadd,_t
  1569                           
  1570                           ;main.c: 34: rate=t;
  1571  000916  C039  F010         	movff	_t,?___fttol
  1572  00091A  C03A  F011         	movff	_t+1,?___fttol+1
  1573  00091E  C03B  F012         	movff	_t+2,?___fttol+2
  1574  000922  EC4F  F006         	call	___fttol	;wreg free
  1575  000926  C010  F03C         	movff	?___fttol,_rate
  1576  00092A  C011  F03D         	movff	?___fttol+1,_rate+1
  1577                           
  1578                           ;main.c: 35: control=1;
  1579  00092E  6E2E               	movwf	??_caluclation& (0+255),c
  1580  000930  0E01               	movlw	1
  1581  000932  6E48               	movwf	_control,c
  1582  000934  502E               	movf	??_caluclation& (0+255),w,c
  1583  000936  0012               	return	
  1584  000938                     __end_of_caluclation:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           intcon	equ	0xFF2
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           status	equ	0xFD8
  1596                           
  1597 ;; *************** function ___lbtoft *****************
  1598 ;; Defined at:
  1599 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbtoft.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  c               1   23[COMRAM] unsigned char 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  3   23[COMRAM] float 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1613 ;;      Params:         3       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0
  1615 ;;      Temps:          2       0       0       0       0       0       0
  1616 ;;      Totals:         5       0       0       0       0       0       0
  1617 ;;Total ram usage:        5 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		___ftpack
  1622 ;; This function is called by:
  1623 ;;		_caluclation
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text11
  1628  0010E4                     __ptext11:
  1629                           	opt stack 0
  1630  0010E4                     ___lbtoft:
  1631                           	opt stack 26
  1632                           
  1633                           ;incstack = 0
  1634                           ;incstack = 0
  1635  0010E4  5018               	movf	___lbtoft@c,w,c
  1636  0010E6  6E10               	movwf	?___ftpack,c
  1637  0010E8  6A11               	clrf	?___ftpack+1,c
  1638  0010EA  6A12               	clrf	?___ftpack+2,c
  1639  0010EC  6E1B               	movwf	??___lbtoft& (0+255),c
  1640  0010EE  0E8E               	movlw	142
  1641  0010F0  6E13               	movwf	?___ftpack+3,c
  1642  0010F2  501B               	movf	??___lbtoft& (0+255),w,c
  1643  0010F4  6E1C               	movwf	(??___lbtoft+1)& (0+255),c
  1644  0010F6  0E00               	movlw	0
  1645  0010F8  6E14               	movwf	?___ftpack+4,c
  1646  0010FA  501C               	movf	(??___lbtoft+1)& (0+255),w,c
  1647  0010FC  EC30  F007         	call	___ftpack	;wreg free
  1648  001100  C012  F01A         	movff	?___ftpack+2,?___lbtoft+2
  1649  001104  C011  F019         	movff	?___ftpack+1,?___lbtoft+1
  1650  001108  C010  F018         	movff	?___ftpack,?___lbtoft
  1651  00110C  0012               	return	
  1652  00110E                     __end_of___lbtoft:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           prodh	equ	0xFF4
  1659                           prodl	equ	0xFF3
  1660                           intcon	equ	0xFF2
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function ___fttol *****************
  1666 ;; Defined at:
  1667 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fttol.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  f1              3   15[COMRAM] float 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  lval            4   25[COMRAM] unsigned long 
  1672 ;;  exp1            1   29[COMRAM] unsigned char 
  1673 ;;  sign1           1   24[COMRAM] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  4   15[COMRAM] long 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1683 ;;      Params:         4       0       0       0       0       0       0
  1684 ;;      Locals:         6       0       0       0       0       0       0
  1685 ;;      Temps:          5       0       0       0       0       0       0
  1686 ;;      Totals:        15       0       0       0       0       0       0
  1687 ;;Total ram usage:       15 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    2
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_caluclation
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text12
  1698  000C9E                     __ptext12:
  1699                           	opt stack 0
  1700  000C9E                     ___fttol:
  1701                           	opt stack 27
  1702                           
  1703                           ;incstack = 0
  1704                           ;incstack = 0
  1705  000C9E  0E0F               	movlw	15
  1706  000CA0  6E14               	movwf	??___fttol& (0+255),c
  1707  000CA2  C010  F015         	movff	___fttol@f1,??___fttol+1
  1708  000CA6  C011  F016         	movff	___fttol@f1+1,??___fttol+2
  1709  000CAA  C012  F017         	movff	___fttol@f1+2,??___fttol+3
  1710  000CAE  2814               	incf	??___fttol,w,c
  1711  000CB0  6E18               	movwf	(??___fttol+4)& (0+255),c
  1712  000CB2  D004               	goto	u620
  1713  000CB4                     u625:
  1714  000CB4  90D8               	bcf	status,0,c
  1715  000CB6  3217               	rrcf	??___fttol+3,f,c
  1716  000CB8  3216               	rrcf	??___fttol+2,f,c
  1717  000CBA  3215               	rrcf	??___fttol+1,f,c
  1718  000CBC                     u620:
  1719  000CBC  2E18               	decfsz	(??___fttol+4)& (0+255),f,c
  1720  000CBE  D7FA               	goto	u625
  1721  000CC0  5015               	movf	??___fttol+1,w,c
  1722  000CC2  6E1E               	movwf	___fttol@exp1,c
  1723  000CC4  661E               	tstfsz	___fttol@exp1& (0+255),c
  1724  000CC6  D009               	goto	l1389
  1725  000CC8  0E00               	movlw	0
  1726  000CCA  6E10               	movwf	?___fttol,c
  1727  000CCC  0E00               	movlw	0
  1728  000CCE  6E11               	movwf	?___fttol+1,c
  1729  000CD0  0E00               	movlw	0
  1730  000CD2  6E12               	movwf	?___fttol+2,c
  1731  000CD4  0E00               	movlw	0
  1732  000CD6  6E13               	movwf	?___fttol+3,c
  1733  000CD8  0012               	return	
  1734  000CDA                     l1389:
  1735  000CDA  0E17               	movlw	23
  1736  000CDC  6E14               	movwf	??___fttol& (0+255),c
  1737  000CDE  C010  F015         	movff	___fttol@f1,??___fttol+1
  1738  000CE2  C011  F016         	movff	___fttol@f1+1,??___fttol+2
  1739  000CE6  C012  F017         	movff	___fttol@f1+2,??___fttol+3
  1740  000CEA  2814               	incf	??___fttol,w,c
  1741  000CEC  6E18               	movwf	(??___fttol+4)& (0+255),c
  1742  000CEE  D004               	goto	u640
  1743  000CF0                     u645:
  1744  000CF0  90D8               	bcf	status,0,c
  1745  000CF2  3217               	rrcf	??___fttol+3,f,c
  1746  000CF4  3216               	rrcf	??___fttol+2,f,c
  1747  000CF6  3215               	rrcf	??___fttol+1,f,c
  1748  000CF8                     u640:
  1749  000CF8  2E18               	decfsz	(??___fttol+4)& (0+255),f,c
  1750  000CFA  D7FA               	goto	u645
  1751  000CFC  5015               	movf	??___fttol+1,w,c
  1752  000CFE  6E19               	movwf	___fttol@sign1,c
  1753  000D00  8E11               	bsf	___fttol@f1+1,7,c
  1754  000D02  0EFF               	movlw	255
  1755  000D04  1610               	andwf	___fttol@f1,f,c
  1756  000D06  0EFF               	movlw	255
  1757  000D08  1611               	andwf	___fttol@f1+1,f,c
  1758  000D0A  0E00               	movlw	0
  1759  000D0C  1612               	andwf	___fttol@f1+2,f,c
  1760  000D0E  5010               	movf	___fttol@f1,w,c
  1761  000D10  6E1A               	movwf	___fttol@lval,c
  1762  000D12  5011               	movf	___fttol@f1+1,w,c
  1763  000D14  6E1B               	movwf	___fttol@lval+1,c
  1764  000D16  5012               	movf	___fttol@f1+2,w,c
  1765  000D18  6E1C               	movwf	___fttol@lval+2,c
  1766  000D1A  6A1D               	clrf	___fttol@lval+3,c
  1767  000D1C  0E8E               	movlw	142
  1768  000D1E  5E1E               	subwf	___fttol@exp1,f,c
  1769  000D20  AE1E               	btfss	___fttol@exp1,7,c
  1770  000D22  D016               	goto	l1411
  1771  000D24  501E               	movf	___fttol@exp1,w,c
  1772  000D26  0A80               	xorlw	128
  1773  000D28  0F8F               	addlw	143
  1774  000D2A  B0D8               	btfsc	status,0,c
  1775  000D2C  D009               	goto	l1407
  1776  000D2E  0E00               	movlw	0
  1777  000D30  6E10               	movwf	?___fttol,c
  1778  000D32  0E00               	movlw	0
  1779  000D34  6E11               	movwf	?___fttol+1,c
  1780  000D36  0E00               	movlw	0
  1781  000D38  6E12               	movwf	?___fttol+2,c
  1782  000D3A  0E00               	movlw	0
  1783  000D3C  6E13               	movwf	?___fttol+3,c
  1784  000D3E  0012               	return	
  1785  000D40                     l1407:
  1786  000D40  90D8               	bcf	status,0,c
  1787  000D42  321D               	rrcf	___fttol@lval+3,f,c
  1788  000D44  321C               	rrcf	___fttol@lval+2,f,c
  1789  000D46  321B               	rrcf	___fttol@lval+1,f,c
  1790  000D48  321A               	rrcf	___fttol@lval,f,c
  1791  000D4A  3E1E               	incfsz	___fttol@exp1,f,c
  1792  000D4C  D7F9               	goto	l1407
  1793  000D4E  D014               	goto	l1421
  1794  000D50                     l1411:
  1795  000D50  0E17               	movlw	23
  1796  000D52  641E               	cpfsgt	___fttol@exp1,c
  1797  000D54  D00F               	goto	l1419
  1798  000D56  0E00               	movlw	0
  1799  000D58  6E10               	movwf	?___fttol,c
  1800  000D5A  0E00               	movlw	0
  1801  000D5C  6E11               	movwf	?___fttol+1,c
  1802  000D5E  0E00               	movlw	0
  1803  000D60  6E12               	movwf	?___fttol+2,c
  1804  000D62  0E00               	movlw	0
  1805  000D64  6E13               	movwf	?___fttol+3,c
  1806  000D66  0012               	return	
  1807  000D68                     l1417:
  1808  000D68  90D8               	bcf	status,0,c
  1809  000D6A  361A               	rlcf	___fttol@lval,f,c
  1810  000D6C  361B               	rlcf	___fttol@lval+1,f,c
  1811  000D6E  361C               	rlcf	___fttol@lval+2,f,c
  1812  000D70  361D               	rlcf	___fttol@lval+3,f,c
  1813  000D72  061E               	decf	___fttol@exp1,f,c
  1814  000D74                     l1419:
  1815  000D74  661E               	tstfsz	___fttol@exp1,c
  1816  000D76  D7F8               	goto	l1417
  1817  000D78                     l1421:
  1818  000D78  5019               	movf	___fttol@sign1,w,c
  1819  000D7A  B4D8               	btfsc	status,2,c
  1820  000D7C  D008               	goto	l1425
  1821  000D7E  1E1D               	comf	___fttol@lval+3,f,c
  1822  000D80  1E1C               	comf	___fttol@lval+2,f,c
  1823  000D82  1E1B               	comf	___fttol@lval+1,f,c
  1824  000D84  6C1A               	negf	___fttol@lval,c
  1825  000D86  0E00               	movlw	0
  1826  000D88  221B               	addwfc	___fttol@lval+1,f,c
  1827  000D8A  221C               	addwfc	___fttol@lval+2,f,c
  1828  000D8C  221D               	addwfc	___fttol@lval+3,f,c
  1829  000D8E                     l1425:
  1830  000D8E  C01A  F010         	movff	___fttol@lval,?___fttol
  1831  000D92  C01B  F011         	movff	___fttol@lval+1,?___fttol+1
  1832  000D96  C01C  F012         	movff	___fttol@lval+2,?___fttol+2
  1833  000D9A  C01D  F013         	movff	___fttol@lval+3,?___fttol+3
  1834  000D9E  0012               	return	
  1835  000DA0                     __end_of___fttol:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           intcon	equ	0xFF2
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function ___awtoft *****************
  1849 ;; Defined at:
  1850 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtoft.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  c               2   23[COMRAM] int 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  sign            1   27[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  3   23[COMRAM] float 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, status,0, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1864 ;;      Params:         3       0       0       0       0       0       0
  1865 ;;      Locals:         1       0       0       0       0       0       0
  1866 ;;      Temps:          1       0       0       0       0       0       0
  1867 ;;      Totals:         5       0       0       0       0       0       0
  1868 ;;Total ram usage:        5 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    3
  1871 ;; This function calls:
  1872 ;;		___ftpack
  1873 ;; This function is called by:
  1874 ;;		_caluclation
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text13
  1879  000FCE                     __ptext13:
  1880                           	opt stack 0
  1881  000FCE                     ___awtoft:
  1882                           	opt stack 26
  1883                           
  1884                           ;incstack = 0
  1885                           ;incstack = 0
  1886  000FCE  6E1B               	movwf	??___awtoft& (0+255),c
  1887  000FD0  0E00               	movlw	0
  1888  000FD2  6E1C               	movwf	___awtoft@sign,c
  1889  000FD4  501B               	movf	??___awtoft& (0+255),w,c
  1890  000FD6  AE19               	btfss	___awtoft@c+1,7,c
  1891  000FD8  D008               	goto	l1379
  1892  000FDA  6C18               	negf	___awtoft@c,c
  1893  000FDC  1E19               	comf	___awtoft@c+1,f,c
  1894  000FDE  B0D8               	btfsc	status,0,c
  1895  000FE0  2A19               	incf	___awtoft@c+1,f,c
  1896  000FE2  6E1B               	movwf	??___awtoft& (0+255),c
  1897  000FE4  0E01               	movlw	1
  1898  000FE6  6E1C               	movwf	___awtoft@sign,c
  1899  000FE8  501B               	movf	??___awtoft& (0+255),w,c
  1900  000FEA                     l1379:
  1901  000FEA  C018  F010         	movff	___awtoft@c,?___ftpack
  1902  000FEE  C019  F011         	movff	___awtoft@c+1,?___ftpack+1
  1903  000FF2  6A12               	clrf	?___ftpack+2,c
  1904  000FF4  6E1B               	movwf	??___awtoft& (0+255),c
  1905  000FF6  0E8E               	movlw	142
  1906  000FF8  6E13               	movwf	?___ftpack+3,c
  1907  000FFA  501B               	movf	??___awtoft& (0+255),w,c
  1908  000FFC  C01C  F014         	movff	___awtoft@sign,?___ftpack+4
  1909  001000  EC30  F007         	call	___ftpack	;wreg free
  1910  001004  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  1911  001008  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  1912  00100C  C010  F018         	movff	?___ftpack,?___awtoft
  1913  001010  0012               	return	
  1914  001012                     __end_of___awtoft:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           prodh	equ	0xFF4
  1921                           prodl	equ	0xFF3
  1922                           intcon	equ	0xFF2
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function ___asftmul *****************
  1928 ;; Defined at:
  1929 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftmul.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  f1p             2   40[COMRAM] PTR float 
  1932 ;;		 -> value(3), 
  1933 ;;  f2              3   42[COMRAM] float 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  3   40[COMRAM] float 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         5       0       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0
  1948 ;;      Totals:         5       0       0       0       0       0       0
  1949 ;;Total ram usage:        5 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    4
  1952 ;; This function calls:
  1953 ;;		___ftmul
  1954 ;; This function is called by:
  1955 ;;		_caluclation
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text14
  1960  001050                     __ptext14:
  1961                           	opt stack 0
  1962  001050                     ___asftmul:
  1963                           	opt stack 25
  1964                           
  1965                           ;	Return value of ___asftmul is never used
  1966                           
  1967                           ;incstack = 0
  1968                           ;incstack = 0
  1969  001050  C029  FFD9         	movff	___asftmul@f1p,fsr2l
  1970  001054  C02A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  1971  001058  CFDE F018          	movff	postinc2,?___ftmul
  1972  00105C  CFDE F019          	movff	postinc2,?___ftmul+1
  1973  001060  CFDD F01A          	movff	postdec2,?___ftmul+2
  1974  001064  C02B  F01B         	movff	___asftmul@f2,?___ftmul+3
  1975  001068  C02C  F01C         	movff	___asftmul@f2+1,?___ftmul+4
  1976  00106C  C02D  F01D         	movff	___asftmul@f2+2,?___ftmul+5
  1977  001070  EC3C  F005         	call	___ftmul	;wreg free
  1978  001074  C029  FFD9         	movff	___asftmul@f1p,fsr2l
  1979  001078  C02A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  1980  00107C  C018  FFDE         	movff	?___ftmul,postinc2
  1981  001080  C019  FFDE         	movff	?___ftmul+1,postinc2
  1982  001084  C01A  FFDD         	movff	?___ftmul+2,postdec2
  1983  001088  52DD               	movf	postdec2,f,c
  1984  00108A  0012               	return	
  1985  00108C                     __end_of___asftmul:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           prodh	equ	0xFF4
  1992                           prodl	equ	0xFF3
  1993                           intcon	equ	0xFF2
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function ___ftmul *****************
  2003 ;; Defined at:
  2004 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftmul.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  f1              3   23[COMRAM] float 
  2007 ;;  f2              3   26[COMRAM] float 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  2010 ;;  sign            1   39[COMRAM] unsigned char 
  2011 ;;  cntr            1   38[COMRAM] unsigned char 
  2012 ;;  exp             1   37[COMRAM] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  3   23[COMRAM] float 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         6       0       0       0       0       0       0
  2023 ;;      Locals:         6       0       0       0       0       0       0
  2024 ;;      Temps:          5       0       0       0       0       0       0
  2025 ;;      Totals:        17       0       0       0       0       0       0
  2026 ;;Total ram usage:       17 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    3
  2029 ;; This function calls:
  2030 ;;		___ftpack
  2031 ;; This function is called by:
  2032 ;;		_caluclation
  2033 ;;		___asftmul
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text15
  2038  000A78                     __ptext15:
  2039                           	opt stack 0
  2040  000A78                     ___ftmul:
  2041                           	opt stack 26
  2042                           
  2043                           ;incstack = 0
  2044                           ;incstack = 0
  2045  000A78  0E0F               	movlw	15
  2046  000A7A  6E1E               	movwf	??___ftmul& (0+255),c
  2047  000A7C  C018  F01F         	movff	___ftmul@f1,??___ftmul+1
  2048  000A80  C019  F020         	movff	___ftmul@f1+1,??___ftmul+2
  2049  000A84  C01A  F021         	movff	___ftmul@f1+2,??___ftmul+3
  2050  000A88  281E               	incf	??___ftmul,w,c
  2051  000A8A  6E22               	movwf	(??___ftmul+4)& (0+255),c
  2052  000A8C  D004               	goto	u550
  2053  000A8E                     u555:
  2054  000A8E  90D8               	bcf	status,0,c
  2055  000A90  3221               	rrcf	??___ftmul+3,f,c
  2056  000A92  3220               	rrcf	??___ftmul+2,f,c
  2057  000A94  321F               	rrcf	??___ftmul+1,f,c
  2058  000A96                     u550:
  2059  000A96  2E22               	decfsz	(??___ftmul+4)& (0+255),f,c
  2060  000A98  D7FA               	goto	u555
  2061  000A9A  501F               	movf	??___ftmul+1,w,c
  2062  000A9C  6E26               	movwf	___ftmul@exp,c
  2063  000A9E  6626               	tstfsz	___ftmul@exp& (0+255),c
  2064  000AA0  D007               	goto	l1329
  2065  000AA2  0E00               	movlw	0
  2066  000AA4  6E18               	movwf	?___ftmul,c
  2067  000AA6  0E00               	movlw	0
  2068  000AA8  6E19               	movwf	?___ftmul+1,c
  2069  000AAA  0E00               	movlw	0
  2070  000AAC  6E1A               	movwf	?___ftmul+2,c
  2071  000AAE  0012               	return	
  2072  000AB0                     l1329:
  2073  000AB0  0E0F               	movlw	15
  2074  000AB2  6E1E               	movwf	??___ftmul& (0+255),c
  2075  000AB4  C01B  F01F         	movff	___ftmul@f2,??___ftmul+1
  2076  000AB8  C01C  F020         	movff	___ftmul@f2+1,??___ftmul+2
  2077  000ABC  C01D  F021         	movff	___ftmul@f2+2,??___ftmul+3
  2078  000AC0  281E               	incf	??___ftmul,w,c
  2079  000AC2  6E22               	movwf	(??___ftmul+4)& (0+255),c
  2080  000AC4  D004               	goto	u570
  2081  000AC6                     u575:
  2082  000AC6  90D8               	bcf	status,0,c
  2083  000AC8  3221               	rrcf	??___ftmul+3,f,c
  2084  000ACA  3220               	rrcf	??___ftmul+2,f,c
  2085  000ACC  321F               	rrcf	??___ftmul+1,f,c
  2086  000ACE                     u570:
  2087  000ACE  2E22               	decfsz	(??___ftmul+4)& (0+255),f,c
  2088  000AD0  D7FA               	goto	u575
  2089  000AD2  501F               	movf	??___ftmul+1,w,c
  2090  000AD4  6E28               	movwf	___ftmul@sign,c
  2091  000AD6  6628               	tstfsz	___ftmul@sign& (0+255),c
  2092  000AD8  D007               	goto	l1335
  2093  000ADA  0E00               	movlw	0
  2094  000ADC  6E18               	movwf	?___ftmul,c
  2095  000ADE  0E00               	movlw	0
  2096  000AE0  6E19               	movwf	?___ftmul+1,c
  2097  000AE2  0E00               	movlw	0
  2098  000AE4  6E1A               	movwf	?___ftmul+2,c
  2099  000AE6  0012               	return	
  2100  000AE8                     l1335:
  2101  000AE8  5028               	movf	___ftmul@sign,w,c
  2102  000AEA  0F7B               	addlw	123
  2103  000AEC  2626               	addwf	___ftmul@exp,f,c
  2104  000AEE  C01A  F028         	movff	___ftmul@f1+2,___ftmul@sign
  2105  000AF2  501D               	movf	(___ftmul@f2+2)& (0+255),w,c
  2106  000AF4  1A28               	xorwf	___ftmul@sign,f,c
  2107  000AF6  0E80               	movlw	128
  2108  000AF8  1628               	andwf	___ftmul@sign,f,c
  2109  000AFA  8E19               	bsf	___ftmul@f1+1,7,c
  2110  000AFC  8E1C               	bsf	___ftmul@f2+1,7,c
  2111  000AFE  0EFF               	movlw	255
  2112  000B00  161B               	andwf	___ftmul@f2,f,c
  2113  000B02  0EFF               	movlw	255
  2114  000B04  161C               	andwf	___ftmul@f2+1,f,c
  2115  000B06  0E00               	movlw	0
  2116  000B08  161D               	andwf	___ftmul@f2+2,f,c
  2117  000B0A  0E00               	movlw	0
  2118  000B0C  6E23               	movwf	___ftmul@f3_as_product,c
  2119  000B0E  0E00               	movlw	0
  2120  000B10  6E24               	movwf	___ftmul@f3_as_product+1,c
  2121  000B12  0E00               	movlw	0
  2122  000B14  6E25               	movwf	___ftmul@f3_as_product+2,c
  2123  000B16  6E1E               	movwf	??___ftmul& (0+255),c
  2124  000B18  0E07               	movlw	7
  2125  000B1A  6E27               	movwf	___ftmul@cntr,c
  2126  000B1C  501E               	movf	??___ftmul& (0+255),w,c
  2127  000B1E                     l1349:
  2128  000B1E  A018               	btfss	___ftmul@f1,0,c
  2129  000B20  D006               	goto	l1353
  2130  000B22  501B               	movf	___ftmul@f2,w,c
  2131  000B24  2623               	addwf	___ftmul@f3_as_product,f,c
  2132  000B26  501C               	movf	___ftmul@f2+1,w,c
  2133  000B28  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  2134  000B2A  501D               	movf	___ftmul@f2+2,w,c
  2135  000B2C  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  2136  000B2E                     l1353:
  2137  000B2E  90D8               	bcf	status,0,c
  2138  000B30  321A               	rrcf	___ftmul@f1+2,f,c
  2139  000B32  3219               	rrcf	___ftmul@f1+1,f,c
  2140  000B34  3218               	rrcf	___ftmul@f1,f,c
  2141  000B36  90D8               	bcf	status,0,c
  2142  000B38  361B               	rlcf	___ftmul@f2,f,c
  2143  000B3A  361C               	rlcf	___ftmul@f2+1,f,c
  2144  000B3C  361D               	rlcf	___ftmul@f2+2,f,c
  2145  000B3E  2E27               	decfsz	___ftmul@cntr,f,c
  2146  000B40  D7EE               	goto	l1349
  2147  000B42  6E1E               	movwf	??___ftmul& (0+255),c
  2148  000B44  0E09               	movlw	9
  2149  000B46  6E27               	movwf	___ftmul@cntr,c
  2150  000B48  501E               	movf	??___ftmul& (0+255),w,c
  2151  000B4A                     l1359:
  2152  000B4A  A018               	btfss	___ftmul@f1,0,c
  2153  000B4C  D006               	goto	l1363
  2154  000B4E  501B               	movf	___ftmul@f2,w,c
  2155  000B50  2623               	addwf	___ftmul@f3_as_product,f,c
  2156  000B52  501C               	movf	___ftmul@f2+1,w,c
  2157  000B54  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  2158  000B56  501D               	movf	___ftmul@f2+2,w,c
  2159  000B58  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  2160  000B5A                     l1363:
  2161  000B5A  90D8               	bcf	status,0,c
  2162  000B5C  321A               	rrcf	___ftmul@f1+2,f,c
  2163  000B5E  3219               	rrcf	___ftmul@f1+1,f,c
  2164  000B60  3218               	rrcf	___ftmul@f1,f,c
  2165  000B62  90D8               	bcf	status,0,c
  2166  000B64  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  2167  000B66  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  2168  000B68  3223               	rrcf	___ftmul@f3_as_product,f,c
  2169  000B6A  2E27               	decfsz	___ftmul@cntr,f,c
  2170  000B6C  D7EE               	goto	l1359
  2171  000B6E  C023  F010         	movff	___ftmul@f3_as_product,?___ftpack
  2172  000B72  C024  F011         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  2173  000B76  C025  F012         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  2174  000B7A  C026  F013         	movff	___ftmul@exp,?___ftpack+3
  2175  000B7E  C028  F014         	movff	___ftmul@sign,?___ftpack+4
  2176  000B82  EC30  F007         	call	___ftpack	;wreg free
  2177  000B86  C012  F01A         	movff	?___ftpack+2,?___ftmul+2
  2178  000B8A  C011  F019         	movff	?___ftpack+1,?___ftmul+1
  2179  000B8E  C010  F018         	movff	?___ftpack,?___ftmul
  2180  000B92  0012               	return	
  2181  000B94                     __end_of___ftmul:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           intcon	equ	0xFF2
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postinc2	equ	0xFDE
  2193                           postdec2	equ	0xFDD
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function ___ftdiv *****************
  2199 ;; Defined at:
  2200 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdiv.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  f1              3   23[COMRAM] float 
  2203 ;;  f2              3   26[COMRAM] float 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  f3              3   34[COMRAM] float 
  2206 ;;  sign            1   39[COMRAM] unsigned char 
  2207 ;;  exp             1   38[COMRAM] unsigned char 
  2208 ;;  cntr            1   37[COMRAM] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  3   23[COMRAM] float 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2218 ;;      Params:         6       0       0       0       0       0       0
  2219 ;;      Locals:         6       0       0       0       0       0       0
  2220 ;;      Temps:          5       0       0       0       0       0       0
  2221 ;;      Totals:        17       0       0       0       0       0       0
  2222 ;;Total ram usage:       17 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    3
  2225 ;; This function calls:
  2226 ;;		___ftpack
  2227 ;; This function is called by:
  2228 ;;		_caluclation
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text16
  2233  000B94                     __ptext16:
  2234                           	opt stack 0
  2235  000B94                     ___ftdiv:
  2236                           	opt stack 26
  2237                           
  2238                           ;incstack = 0
  2239                           ;incstack = 0
  2240  000B94  0E0F               	movlw	15
  2241  000B96  6E1E               	movwf	??___ftdiv& (0+255),c
  2242  000B98  C018  F01F         	movff	___ftdiv@f1,??___ftdiv+1
  2243  000B9C  C019  F020         	movff	___ftdiv@f1+1,??___ftdiv+2
  2244  000BA0  C01A  F021         	movff	___ftdiv@f1+2,??___ftdiv+3
  2245  000BA4  281E               	incf	??___ftdiv,w,c
  2246  000BA6  6E22               	movwf	(??___ftdiv+4)& (0+255),c
  2247  000BA8  D004               	goto	u500
  2248  000BAA                     u505:
  2249  000BAA  90D8               	bcf	status,0,c
  2250  000BAC  3221               	rrcf	??___ftdiv+3,f,c
  2251  000BAE  3220               	rrcf	??___ftdiv+2,f,c
  2252  000BB0  321F               	rrcf	??___ftdiv+1,f,c
  2253  000BB2                     u500:
  2254  000BB2  2E22               	decfsz	(??___ftdiv+4)& (0+255),f,c
  2255  000BB4  D7FA               	goto	u505
  2256  000BB6  501F               	movf	??___ftdiv+1,w,c
  2257  000BB8  6E27               	movwf	___ftdiv@exp,c
  2258  000BBA  6627               	tstfsz	___ftdiv@exp& (0+255),c
  2259  000BBC  D007               	goto	l1281
  2260  000BBE  0E00               	movlw	0
  2261  000BC0  6E18               	movwf	?___ftdiv,c
  2262  000BC2  0E00               	movlw	0
  2263  000BC4  6E19               	movwf	?___ftdiv+1,c
  2264  000BC6  0E00               	movlw	0
  2265  000BC8  6E1A               	movwf	?___ftdiv+2,c
  2266  000BCA  0012               	return	
  2267  000BCC                     l1281:
  2268  000BCC  0E0F               	movlw	15
  2269  000BCE  6E1E               	movwf	??___ftdiv& (0+255),c
  2270  000BD0  C01B  F01F         	movff	___ftdiv@f2,??___ftdiv+1
  2271  000BD4  C01C  F020         	movff	___ftdiv@f2+1,??___ftdiv+2
  2272  000BD8  C01D  F021         	movff	___ftdiv@f2+2,??___ftdiv+3
  2273  000BDC  281E               	incf	??___ftdiv,w,c
  2274  000BDE  6E22               	movwf	(??___ftdiv+4)& (0+255),c
  2275  000BE0  D004               	goto	u520
  2276  000BE2                     u525:
  2277  000BE2  90D8               	bcf	status,0,c
  2278  000BE4  3221               	rrcf	??___ftdiv+3,f,c
  2279  000BE6  3220               	rrcf	??___ftdiv+2,f,c
  2280  000BE8  321F               	rrcf	??___ftdiv+1,f,c
  2281  000BEA                     u520:
  2282  000BEA  2E22               	decfsz	(??___ftdiv+4)& (0+255),f,c
  2283  000BEC  D7FA               	goto	u525
  2284  000BEE  501F               	movf	??___ftdiv+1,w,c
  2285  000BF0  6E28               	movwf	___ftdiv@sign,c
  2286  000BF2  6628               	tstfsz	___ftdiv@sign& (0+255),c
  2287  000BF4  D007               	goto	l1287
  2288  000BF6  0E00               	movlw	0
  2289  000BF8  6E18               	movwf	?___ftdiv,c
  2290  000BFA  0E00               	movlw	0
  2291  000BFC  6E19               	movwf	?___ftdiv+1,c
  2292  000BFE  0E00               	movlw	0
  2293  000C00  6E1A               	movwf	?___ftdiv+2,c
  2294  000C02  0012               	return	
  2295  000C04                     l1287:
  2296  000C04  0E00               	movlw	0
  2297  000C06  6E23               	movwf	___ftdiv@f3,c
  2298  000C08  0E00               	movlw	0
  2299  000C0A  6E24               	movwf	___ftdiv@f3+1,c
  2300  000C0C  0E00               	movlw	0
  2301  000C0E  6E25               	movwf	___ftdiv@f3+2,c
  2302  000C10  5028               	movf	___ftdiv@sign,w,c
  2303  000C12  0F89               	addlw	137
  2304  000C14  5E27               	subwf	___ftdiv@exp,f,c
  2305  000C16  C01A  F028         	movff	___ftdiv@f1+2,___ftdiv@sign
  2306  000C1A  501D               	movf	(___ftdiv@f2+2)& (0+255),w,c
  2307  000C1C  1A28               	xorwf	___ftdiv@sign,f,c
  2308  000C1E  0E80               	movlw	128
  2309  000C20  1628               	andwf	___ftdiv@sign,f,c
  2310  000C22  8E19               	bsf	___ftdiv@f1+1,7,c
  2311  000C24  0EFF               	movlw	255
  2312  000C26  1618               	andwf	___ftdiv@f1,f,c
  2313  000C28  0EFF               	movlw	255
  2314  000C2A  1619               	andwf	___ftdiv@f1+1,f,c
  2315  000C2C  0E00               	movlw	0
  2316  000C2E  161A               	andwf	___ftdiv@f1+2,f,c
  2317  000C30  8E1C               	bsf	___ftdiv@f2+1,7,c
  2318  000C32  0EFF               	movlw	255
  2319  000C34  161B               	andwf	___ftdiv@f2,f,c
  2320  000C36  0EFF               	movlw	255
  2321  000C38  161C               	andwf	___ftdiv@f2+1,f,c
  2322  000C3A  0E00               	movlw	0
  2323  000C3C  161D               	andwf	___ftdiv@f2+2,f,c
  2324  000C3E  6E1E               	movwf	??___ftdiv& (0+255),c
  2325  000C40  0E18               	movlw	24
  2326  000C42  6E26               	movwf	___ftdiv@cntr,c
  2327  000C44  501E               	movf	??___ftdiv& (0+255),w,c
  2328  000C46                     l528:
  2329  000C46  90D8               	bcf	status,0,c
  2330  000C48  3623               	rlcf	___ftdiv@f3,f,c
  2331  000C4A  3624               	rlcf	___ftdiv@f3+1,f,c
  2332  000C4C  3625               	rlcf	___ftdiv@f3+2,f,c
  2333  000C4E  501B               	movf	___ftdiv@f2,w,c
  2334  000C50  5C18               	subwf	___ftdiv@f1,w,c
  2335  000C52  501C               	movf	___ftdiv@f2+1,w,c
  2336  000C54  5819               	subwfb	___ftdiv@f1+1,w,c
  2337  000C56  501D               	movf	___ftdiv@f2+2,w,c
  2338  000C58  581A               	subwfb	___ftdiv@f1+2,w,c
  2339  000C5A  A0D8               	btfss	status,0,c
  2340  000C5C  D007               	goto	l529
  2341  000C5E  501B               	movf	___ftdiv@f2,w,c
  2342  000C60  5E18               	subwf	___ftdiv@f1,f,c
  2343  000C62  501C               	movf	___ftdiv@f2+1,w,c
  2344  000C64  5A19               	subwfb	___ftdiv@f1+1,f,c
  2345  000C66  501D               	movf	___ftdiv@f2+2,w,c
  2346  000C68  5A1A               	subwfb	___ftdiv@f1+2,f,c
  2347  000C6A  8023               	bsf	___ftdiv@f3,0,c
  2348  000C6C                     l529:
  2349  000C6C  90D8               	bcf	status,0,c
  2350  000C6E  3618               	rlcf	___ftdiv@f1,f,c
  2351  000C70  3619               	rlcf	___ftdiv@f1+1,f,c
  2352  000C72  361A               	rlcf	___ftdiv@f1+2,f,c
  2353  000C74  2E26               	decfsz	___ftdiv@cntr,f,c
  2354  000C76  D7E7               	goto	l528
  2355  000C78  C023  F010         	movff	___ftdiv@f3,?___ftpack
  2356  000C7C  C024  F011         	movff	___ftdiv@f3+1,?___ftpack+1
  2357  000C80  C025  F012         	movff	___ftdiv@f3+2,?___ftpack+2
  2358  000C84  C027  F013         	movff	___ftdiv@exp,?___ftpack+3
  2359  000C88  C028  F014         	movff	___ftdiv@sign,?___ftpack+4
  2360  000C8C  EC30  F007         	call	___ftpack	;wreg free
  2361  000C90  C012  F01A         	movff	?___ftpack+2,?___ftdiv+2
  2362  000C94  C011  F019         	movff	?___ftpack+1,?___ftdiv+1
  2363  000C98  C010  F018         	movff	?___ftpack,?___ftdiv
  2364  000C9C  0012               	return	
  2365  000C9E                     __end_of___ftdiv:
  2366                           	opt stack 0
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           intcon	equ	0xFF2
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function ___ftadd *****************
  2383 ;; Defined at:
  2384 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftadd.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  f1              3   28[COMRAM] float 
  2387 ;;  f2              3   31[COMRAM] float 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  exp1            1   41[COMRAM] unsigned char 
  2390 ;;  exp2            1   40[COMRAM] unsigned char 
  2391 ;;  sign            1   39[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  3   28[COMRAM] float 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         6       0       0       0       0       0       0
  2402 ;;      Locals:         3       0       0       0       0       0       0
  2403 ;;      Temps:          5       0       0       0       0       0       0
  2404 ;;      Totals:        14       0       0       0       0       0       0
  2405 ;;Total ram usage:       14 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		___ftpack
  2410 ;; This function is called by:
  2411 ;;		_caluclation
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text17
  2416  00060E                     __ptext17:
  2417                           	opt stack 0
  2418  00060E                     ___ftadd:
  2419                           	opt stack 26
  2420                           
  2421                           ;incstack = 0
  2422                           ;incstack = 0
  2423  00060E  0E0F               	movlw	15
  2424  000610  6E23               	movwf	??___ftadd& (0+255),c
  2425  000612  C01D  F024         	movff	___ftadd@f1,??___ftadd+1
  2426  000616  C01E  F025         	movff	___ftadd@f1+1,??___ftadd+2
  2427  00061A  C01F  F026         	movff	___ftadd@f1+2,??___ftadd+3
  2428  00061E  2823               	incf	??___ftadd,w,c
  2429  000620  6E27               	movwf	(??___ftadd+4)& (0+255),c
  2430  000622  D004               	goto	u290
  2431  000624                     u295:
  2432  000624  90D8               	bcf	status,0,c
  2433  000626  3226               	rrcf	??___ftadd+3,f,c
  2434  000628  3225               	rrcf	??___ftadd+2,f,c
  2435  00062A  3224               	rrcf	??___ftadd+1,f,c
  2436  00062C                     u290:
  2437  00062C  2E27               	decfsz	(??___ftadd+4)& (0+255),f,c
  2438  00062E  D7FA               	goto	u295
  2439  000630  5024               	movf	??___ftadd+1,w,c
  2440  000632  6E2A               	movwf	___ftadd@exp1,c
  2441  000634  0E0F               	movlw	15
  2442  000636  6E23               	movwf	??___ftadd& (0+255),c
  2443  000638  C020  F024         	movff	___ftadd@f2,??___ftadd+1
  2444  00063C  C021  F025         	movff	___ftadd@f2+1,??___ftadd+2
  2445  000640  C022  F026         	movff	___ftadd@f2+2,??___ftadd+3
  2446  000644  2823               	incf	??___ftadd,w,c
  2447  000646  6E27               	movwf	(??___ftadd+4)& (0+255),c
  2448  000648  D004               	goto	u300
  2449  00064A                     u305:
  2450  00064A  90D8               	bcf	status,0,c
  2451  00064C  3226               	rrcf	??___ftadd+3,f,c
  2452  00064E  3225               	rrcf	??___ftadd+2,f,c
  2453  000650  3224               	rrcf	??___ftadd+1,f,c
  2454  000652                     u300:
  2455  000652  2E27               	decfsz	(??___ftadd+4)& (0+255),f,c
  2456  000654  D7FA               	goto	u305
  2457  000656  5024               	movf	??___ftadd+1,w,c
  2458  000658  6E29               	movwf	___ftadd@exp2,c
  2459  00065A  502A               	movf	___ftadd@exp1,w,c
  2460  00065C  B4D8               	btfsc	status,2,c
  2461  00065E  D00B               	goto	l494
  2462  000660  5029               	movf	___ftadd@exp2,w,c
  2463  000662  602A               	cpfslt	___ftadd@exp1,c
  2464  000664  D00F               	goto	l1213
  2465  000666  502A               	movf	___ftadd@exp1,w,c
  2466  000668  0800               	sublw	0
  2467  00066A  2429               	addwf	___ftadd@exp2,w,c
  2468  00066C  6E23               	movwf	??___ftadd& (0+255),c
  2469  00066E  0E19               	movlw	25
  2470  000670  5C23               	subwf	??___ftadd,w,c
  2471  000672  A0D8               	btfss	status,0,c
  2472  000674  D007               	goto	l1213
  2473  000676                     l494:
  2474  000676  C020  F01D         	movff	___ftadd@f2,?___ftadd
  2475  00067A  C021  F01E         	movff	___ftadd@f2+1,?___ftadd+1
  2476  00067E  C022  F01F         	movff	___ftadd@f2+2,?___ftadd+2
  2477  000682  0012               	return	
  2478  000684                     l1213:
  2479  000684  5029               	movf	___ftadd@exp2,w,c
  2480  000686  B4D8               	btfsc	status,2,c
  2481  000688  D00B               	goto	l498
  2482  00068A  502A               	movf	___ftadd@exp1,w,c
  2483  00068C  6029               	cpfslt	___ftadd@exp2,c
  2484  00068E  D00F               	goto	l1219
  2485  000690  5029               	movf	___ftadd@exp2,w,c
  2486  000692  0800               	sublw	0
  2487  000694  242A               	addwf	___ftadd@exp1,w,c
  2488  000696  6E23               	movwf	??___ftadd& (0+255),c
  2489  000698  0E19               	movlw	25
  2490  00069A  5C23               	subwf	??___ftadd,w,c
  2491  00069C  A0D8               	btfss	status,0,c
  2492  00069E  D007               	goto	l1219
  2493  0006A0                     l498:
  2494  0006A0  C01D  F01D         	movff	___ftadd@f1,?___ftadd
  2495  0006A4  C01E  F01E         	movff	___ftadd@f1+1,?___ftadd+1
  2496  0006A8  C01F  F01F         	movff	___ftadd@f1+2,?___ftadd+2
  2497  0006AC  0012               	return	
  2498  0006AE                     l1219:
  2499  0006AE  6E23               	movwf	??___ftadd& (0+255),c
  2500  0006B0  0E06               	movlw	6
  2501  0006B2  6E28               	movwf	___ftadd@sign,c
  2502  0006B4  5023               	movf	??___ftadd& (0+255),w,c
  2503  0006B6  BE1F               	btfsc	___ftadd@f1+2,7,c
  2504  0006B8  8E28               	bsf	___ftadd@sign,7,c
  2505  0006BA  BE22               	btfsc	___ftadd@f2+2,7,c
  2506  0006BC  8C28               	bsf	___ftadd@sign,6,c
  2507  0006BE  8E1E               	bsf	___ftadd@f1+1,7,c
  2508  0006C0  0EFF               	movlw	255
  2509  0006C2  161D               	andwf	___ftadd@f1,f,c
  2510  0006C4  0EFF               	movlw	255
  2511  0006C6  161E               	andwf	___ftadd@f1+1,f,c
  2512  0006C8  0E00               	movlw	0
  2513  0006CA  161F               	andwf	___ftadd@f1+2,f,c
  2514  0006CC  8E21               	bsf	___ftadd@f2+1,7,c
  2515  0006CE  0EFF               	movlw	255
  2516  0006D0  1620               	andwf	___ftadd@f2,f,c
  2517  0006D2  0EFF               	movlw	255
  2518  0006D4  1621               	andwf	___ftadd@f2+1,f,c
  2519  0006D6  0E00               	movlw	0
  2520  0006D8  1622               	andwf	___ftadd@f2+2,f,c
  2521  0006DA  5029               	movf	___ftadd@exp2,w,c
  2522  0006DC  602A               	cpfslt	___ftadd@exp1,c
  2523  0006DE  D018               	goto	l1245
  2524  0006E0                     l1235:
  2525  0006E0  90D8               	bcf	status,0,c
  2526  0006E2  3620               	rlcf	___ftadd@f2,f,c
  2527  0006E4  3621               	rlcf	___ftadd@f2+1,f,c
  2528  0006E6  3622               	rlcf	___ftadd@f2+2,f,c
  2529  0006E8  0629               	decf	___ftadd@exp2,f,c
  2530  0006EA  5029               	movf	___ftadd@exp2,w,c
  2531  0006EC  182A               	xorwf	___ftadd@exp1,w,c
  2532  0006EE  B4D8               	btfsc	status,2,c
  2533  0006F0  D00B               	goto	l1243
  2534  0006F2  0628               	decf	___ftadd@sign,f,c
  2535  0006F4  5028               	movf	___ftadd@sign& (0+255),w,c
  2536  0006F6  0B07               	andlw	7
  2537  0006F8  B4D8               	btfsc	status,2,c
  2538  0006FA  D006               	goto	l1243
  2539  0006FC  D7F1               	goto	l1235
  2540  0006FE                     l1241:
  2541  0006FE  90D8               	bcf	status,0,c
  2542  000700  321F               	rrcf	___ftadd@f1+2,f,c
  2543  000702  321E               	rrcf	___ftadd@f1+1,f,c
  2544  000704  321D               	rrcf	___ftadd@f1,f,c
  2545  000706  2A2A               	incf	___ftadd@exp1,f,c
  2546  000708                     l1243:
  2547  000708  5029               	movf	___ftadd@exp2,w,c
  2548  00070A  622A               	cpfseq	___ftadd@exp1,c
  2549  00070C  D7F8               	goto	l1241
  2550  00070E  D01A               	goto	l509
  2551  000710                     l1245:
  2552  000710  502A               	movf	___ftadd@exp1,w,c
  2553  000712  6029               	cpfslt	___ftadd@exp2,c
  2554  000714  D017               	goto	l509
  2555  000716                     l1247:
  2556  000716  90D8               	bcf	status,0,c
  2557  000718  361D               	rlcf	___ftadd@f1,f,c
  2558  00071A  361E               	rlcf	___ftadd@f1+1,f,c
  2559  00071C  361F               	rlcf	___ftadd@f1+2,f,c
  2560  00071E  062A               	decf	___ftadd@exp1,f,c
  2561  000720  5029               	movf	___ftadd@exp2,w,c
  2562  000722  182A               	xorwf	___ftadd@exp1,w,c
  2563  000724  B4D8               	btfsc	status,2,c
  2564  000726  D00B               	goto	l1255
  2565  000728  0628               	decf	___ftadd@sign,f,c
  2566  00072A  5028               	movf	___ftadd@sign& (0+255),w,c
  2567  00072C  0B07               	andlw	7
  2568  00072E  B4D8               	btfsc	status,2,c
  2569  000730  D006               	goto	l1255
  2570  000732  D7F1               	goto	l1247
  2571  000734                     l1253:
  2572  000734  90D8               	bcf	status,0,c
  2573  000736  3222               	rrcf	___ftadd@f2+2,f,c
  2574  000738  3221               	rrcf	___ftadd@f2+1,f,c
  2575  00073A  3220               	rrcf	___ftadd@f2,f,c
  2576  00073C  2A29               	incf	___ftadd@exp2,f,c
  2577  00073E                     l1255:
  2578  00073E  5029               	movf	___ftadd@exp2,w,c
  2579  000740  622A               	cpfseq	___ftadd@exp1,c
  2580  000742  D7F8               	goto	l1253
  2581  000744                     l509:
  2582  000744  AE28               	btfss	___ftadd@sign,7,c
  2583  000746  D00C               	goto	l518
  2584  000748  0EFF               	movlw	255
  2585  00074A  1A1D               	xorwf	___ftadd@f1,f,c
  2586  00074C  0EFF               	movlw	255
  2587  00074E  1A1E               	xorwf	___ftadd@f1+1,f,c
  2588  000750  0EFF               	movlw	255
  2589  000752  1A1F               	xorwf	___ftadd@f1+2,f,c
  2590  000754  0E01               	movlw	1
  2591  000756  261D               	addwf	___ftadd@f1,f,c
  2592  000758  0E00               	movlw	0
  2593  00075A  221E               	addwfc	___ftadd@f1+1,f,c
  2594  00075C  0E00               	movlw	0
  2595  00075E  221F               	addwfc	___ftadd@f1+2,f,c
  2596  000760                     l518:
  2597  000760  AC28               	btfss	___ftadd@sign,6,c
  2598  000762  D00C               	goto	l1261
  2599  000764  0EFF               	movlw	255
  2600  000766  1A20               	xorwf	___ftadd@f2,f,c
  2601  000768  0EFF               	movlw	255
  2602  00076A  1A21               	xorwf	___ftadd@f2+1,f,c
  2603  00076C  0EFF               	movlw	255
  2604  00076E  1A22               	xorwf	___ftadd@f2+2,f,c
  2605  000770  0E01               	movlw	1
  2606  000772  2620               	addwf	___ftadd@f2,f,c
  2607  000774  0E00               	movlw	0
  2608  000776  2221               	addwfc	___ftadd@f2+1,f,c
  2609  000778  0E00               	movlw	0
  2610  00077A  2222               	addwfc	___ftadd@f2+2,f,c
  2611  00077C                     l1261:
  2612  00077C  6E23               	movwf	??___ftadd& (0+255),c
  2613  00077E  0E00               	movlw	0
  2614  000780  6E28               	movwf	___ftadd@sign,c
  2615  000782  5023               	movf	??___ftadd& (0+255),w,c
  2616  000784  501D               	movf	___ftadd@f1,w,c
  2617  000786  2620               	addwf	___ftadd@f2,f,c
  2618  000788  501E               	movf	___ftadd@f1+1,w,c
  2619  00078A  2221               	addwfc	___ftadd@f2+1,f,c
  2620  00078C  501F               	movf	___ftadd@f1+2,w,c
  2621  00078E  2222               	addwfc	___ftadd@f2+2,f,c
  2622  000790  AE22               	btfss	___ftadd@f2+2,7,c
  2623  000792  D010               	goto	l1271
  2624  000794  0EFF               	movlw	255
  2625  000796  1A20               	xorwf	___ftadd@f2,f,c
  2626  000798  0EFF               	movlw	255
  2627  00079A  1A21               	xorwf	___ftadd@f2+1,f,c
  2628  00079C  0EFF               	movlw	255
  2629  00079E  1A22               	xorwf	___ftadd@f2+2,f,c
  2630  0007A0  0E01               	movlw	1
  2631  0007A2  2620               	addwf	___ftadd@f2,f,c
  2632  0007A4  0E00               	movlw	0
  2633  0007A6  2221               	addwfc	___ftadd@f2+1,f,c
  2634  0007A8  0E00               	movlw	0
  2635  0007AA  2222               	addwfc	___ftadd@f2+2,f,c
  2636  0007AC  6E23               	movwf	??___ftadd& (0+255),c
  2637  0007AE  0E01               	movlw	1
  2638  0007B0  6E28               	movwf	___ftadd@sign,c
  2639  0007B2  5023               	movf	??___ftadd& (0+255),w,c
  2640  0007B4                     l1271:
  2641  0007B4  C020  F010         	movff	___ftadd@f2,?___ftpack
  2642  0007B8  C021  F011         	movff	___ftadd@f2+1,?___ftpack+1
  2643  0007BC  C022  F012         	movff	___ftadd@f2+2,?___ftpack+2
  2644  0007C0  C02A  F013         	movff	___ftadd@exp1,?___ftpack+3
  2645  0007C4  C028  F014         	movff	___ftadd@sign,?___ftpack+4
  2646  0007C8  EC30  F007         	call	___ftpack	;wreg free
  2647  0007CC  C012  F01F         	movff	?___ftpack+2,?___ftadd+2
  2648  0007D0  C011  F01E         	movff	?___ftpack+1,?___ftadd+1
  2649  0007D4  C010  F01D         	movff	?___ftpack,?___ftadd
  2650  0007D8  0012               	return	
  2651  0007DA                     __end_of___ftadd:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postinc2	equ	0xFDE
  2663                           postdec2	equ	0xFDD
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function ___ftpack *****************
  2669 ;; Defined at:
  2670 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\float.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  arg             3   15[COMRAM] unsigned um
  2673 ;;  exp             1   18[COMRAM] unsigned char 
  2674 ;;  sign            1   19[COMRAM] unsigned char 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  3   15[COMRAM] float 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         5       0       0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0
  2688 ;;      Temps:          3       0       0       0       0       0       0
  2689 ;;      Totals:         8       0       0       0       0       0       0
  2690 ;;Total ram usage:        8 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    2
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		___awtoft
  2697 ;;		___ftadd
  2698 ;;		___ftdiv
  2699 ;;		___ftmul
  2700 ;;		___lbtoft
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text18
  2705  000E60                     __ptext18:
  2706                           	opt stack 0
  2707  000E60                     ___ftpack:
  2708                           	opt stack 26
  2709                           
  2710                           ;incstack = 0
  2711                           ;incstack = 0
  2712  000E60  5013               	movf	___ftpack@exp,w,c
  2713  000E62  B4D8               	btfsc	status,2,c
  2714  000E64  D005               	goto	l1175
  2715  000E66  5010               	movf	___ftpack@arg,w,c
  2716  000E68  1011               	iorwf	___ftpack@arg+1,w,c
  2717  000E6A  1012               	iorwf	___ftpack@arg+2,w,c
  2718  000E6C  A4D8               	btfss	status,2,c
  2719  000E6E  D00C               	goto	l1181
  2720  000E70                     l1175:
  2721  000E70  0E00               	movlw	0
  2722  000E72  6E10               	movwf	?___ftpack,c
  2723  000E74  0E00               	movlw	0
  2724  000E76  6E11               	movwf	?___ftpack+1,c
  2725  000E78  0E00               	movlw	0
  2726  000E7A  6E12               	movwf	?___ftpack+2,c
  2727  000E7C  0012               	return	
  2728  000E7E                     l1179:
  2729  000E7E  2A13               	incf	___ftpack@exp,f,c
  2730  000E80  90D8               	bcf	status,0,c
  2731  000E82  3212               	rrcf	___ftpack@arg+2,f,c
  2732  000E84  3211               	rrcf	___ftpack@arg+1,f,c
  2733  000E86  3210               	rrcf	___ftpack@arg,f,c
  2734  000E88                     l1181:
  2735  000E88  0E00               	movlw	0
  2736  000E8A  1410               	andwf	___ftpack@arg,w,c
  2737  000E8C  6E15               	movwf	??___ftpack& (0+255),c
  2738  000E8E  0E00               	movlw	0
  2739  000E90  1411               	andwf	___ftpack@arg+1,w,c
  2740  000E92  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2741  000E94  0EFE               	movlw	254
  2742  000E96  1412               	andwf	___ftpack@arg+2,w,c
  2743  000E98  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2744  000E9A  5015               	movf	??___ftpack,w,c
  2745  000E9C  1016               	iorwf	??___ftpack+1,w,c
  2746  000E9E  1017               	iorwf	??___ftpack+2,w,c
  2747  000EA0  B4D8               	btfsc	status,2,c
  2748  000EA2  D00C               	goto	l1187
  2749  000EA4  D7EC               	goto	l1179
  2750  000EA6                     l1183:
  2751  000EA6  2A13               	incf	___ftpack@exp,f,c
  2752  000EA8  0E01               	movlw	1
  2753  000EAA  2610               	addwf	___ftpack@arg,f,c
  2754  000EAC  0E00               	movlw	0
  2755  000EAE  2211               	addwfc	___ftpack@arg+1,f,c
  2756  000EB0  0E00               	movlw	0
  2757  000EB2  2212               	addwfc	___ftpack@arg+2,f,c
  2758  000EB4  90D8               	bcf	status,0,c
  2759  000EB6  3212               	rrcf	___ftpack@arg+2,f,c
  2760  000EB8  3211               	rrcf	___ftpack@arg+1,f,c
  2761  000EBA  3210               	rrcf	___ftpack@arg,f,c
  2762  000EBC                     l1187:
  2763  000EBC  0E00               	movlw	0
  2764  000EBE  1410               	andwf	___ftpack@arg,w,c
  2765  000EC0  6E15               	movwf	??___ftpack& (0+255),c
  2766  000EC2  0E00               	movlw	0
  2767  000EC4  1411               	andwf	___ftpack@arg+1,w,c
  2768  000EC6  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2769  000EC8  0EFF               	movlw	255
  2770  000ECA  1412               	andwf	___ftpack@arg+2,w,c
  2771  000ECC  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2772  000ECE  5015               	movf	??___ftpack,w,c
  2773  000ED0  1016               	iorwf	??___ftpack+1,w,c
  2774  000ED2  1017               	iorwf	??___ftpack+2,w,c
  2775  000ED4  B4D8               	btfsc	status,2,c
  2776  000ED6  D006               	goto	l1191
  2777  000ED8  D7E6               	goto	l1183
  2778  000EDA                     l1189:
  2779  000EDA  0613               	decf	___ftpack@exp,f,c
  2780  000EDC  90D8               	bcf	status,0,c
  2781  000EDE  3610               	rlcf	___ftpack@arg,f,c
  2782  000EE0  3611               	rlcf	___ftpack@arg+1,f,c
  2783  000EE2  3612               	rlcf	___ftpack@arg+2,f,c
  2784  000EE4                     l1191:
  2785  000EE4  AE11               	btfss	___ftpack@arg+1,7,c
  2786  000EE6  D7F9               	goto	l1189
  2787  000EE8  A013               	btfss	___ftpack@exp,0,c
  2788  000EEA  9E11               	bcf	___ftpack@arg+1,7,c
  2789  000EEC  90D8               	bcf	status,0,c
  2790  000EEE  3213               	rrcf	___ftpack@exp,f,c
  2791  000EF0  5013               	movf	___ftpack@exp,w,c
  2792  000EF2  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2793  000EF4  6A16               	clrf	(??___ftpack+1)& (0+255),c
  2794  000EF6  6A15               	clrf	??___ftpack& (0+255),c
  2795  000EF8  5015               	movf	??___ftpack,w,c
  2796  000EFA  1210               	iorwf	___ftpack@arg,f,c
  2797  000EFC  5016               	movf	??___ftpack+1,w,c
  2798  000EFE  1211               	iorwf	___ftpack@arg+1,f,c
  2799  000F00  5017               	movf	??___ftpack+2,w,c
  2800  000F02  1212               	iorwf	___ftpack@arg+2,f,c
  2801  000F04  5014               	movf	___ftpack@sign,w,c
  2802  000F06  A4D8               	btfss	status,2,c
  2803  000F08  8E12               	bsf	___ftpack@arg+2,7,c
  2804  000F0A  C010  F010         	movff	___ftpack@arg,?___ftpack
  2805  000F0E  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  2806  000F12  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  2807  000F16  0012               	return	
  2808  000F18                     __end_of___ftpack:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _init_display *****************
  2826 ;; Defined at:
  2827 ;;		line 4 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;		None               void
  2834 ;; Registers used:
  2835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0
  2843 ;;      Temps:          1       0       0       0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    3
  2848 ;; This function calls:
  2849 ;;		_write_8bit_data
  2850 ;;		_write_4bit_data
  2851 ;; This function is called by:
  2852 ;;		_main
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text19
  2857  000DA0                     __ptext19:
  2858                           	opt stack 0
  2859  000DA0                     _init_display:
  2860                           	opt stack 27
  2861                           
  2862                           ;LCD.c: 5: TRISB=0x01;
  2863                           
  2864                           ;incstack = 0
  2865                           ;incstack = 0
  2866  000DA0  0E01               	movlw	1
  2867  000DA2  6E93               	movwf	3987,c	;volatile
  2868                           
  2869                           ;LCD.c: 6: PORTB=0x00;
  2870  000DA4  0E00               	movlw	0
  2871  000DA6  6E81               	movwf	3969,c	;volatile
  2872                           
  2873                           ;LCD.c: 7: _delay((unsigned long)((20)*(4000000/4000.0)));
  2874  000DA8  0E1A               	movlw	26
  2875  000DAA  6E13               	movwf	??_init_display& (0+255),c
  2876  000DAC  0EF8               	movlw	248
  2877  000DAE                     u807:
  2878  000DAE  2EE8               	decfsz	wreg,f,c
  2879  000DB0  D7FE               	goto	u807
  2880  000DB2  2E13               	decfsz	??_init_display& (0+255),f,c
  2881  000DB4  D7FC               	goto	u807
  2882  000DB6  F000               	nop	
  2883                           
  2884                           ;LCD.c: 8: write_8bit_data(0x30) ;
  2885  000DB8  6E13               	movwf	??_init_display& (0+255),c
  2886  000DBA  0E30               	movlw	48
  2887  000DBC  6E10               	movwf	?_write_8bit_data,c
  2888  000DBE  5013               	movf	??_init_display& (0+255),w,c
  2889  000DC0  ECC6  F008         	call	_write_8bit_data	;wreg free
  2890                           
  2891                           ;LCD.c: 9: _delay((unsigned long)((6)*(4000000/4000.0))) ;
  2892  000DC4  0E08               	movlw	8
  2893  000DC6  6E13               	movwf	??_init_display& (0+255),c
  2894  000DC8  0EC9               	movlw	201
  2895  000DCA                     u817:
  2896  000DCA  2EE8               	decfsz	wreg,f,c
  2897  000DCC  D7FE               	goto	u817
  2898  000DCE  2E13               	decfsz	??_init_display& (0+255),f,c
  2899  000DD0  D7FC               	goto	u817
  2900  000DD2  D000               	nop2	
  2901                           
  2902                           ;LCD.c: 10: write_8bit_data(0x30) ;
  2903  000DD4  6E13               	movwf	??_init_display& (0+255),c
  2904  000DD6  0E30               	movlw	48
  2905  000DD8  6E10               	movwf	?_write_8bit_data,c
  2906  000DDA  5013               	movf	??_init_display& (0+255),w,c
  2907  000DDC  ECC6  F008         	call	_write_8bit_data	;wreg free
  2908                           
  2909                           ;LCD.c: 11: _delay((unsigned long)((1)*(4000000/4000.0)));
  2910  000DE0  0EFA               	movlw	250
  2911  000DE2                     u827:
  2912  000DE2  F000               	nop	
  2913  000DE4  2EE8               	decfsz	wreg,f,c
  2914  000DE6  D7FD               	goto	u827
  2915                           
  2916                           ;LCD.c: 12: write_8bit_data(0x30) ;
  2917  000DE8  6E13               	movwf	??_init_display& (0+255),c
  2918  000DEA  0E30               	movlw	48
  2919  000DEC  6E10               	movwf	?_write_8bit_data,c
  2920  000DEE  5013               	movf	??_init_display& (0+255),w,c
  2921  000DF0  ECC6  F008         	call	_write_8bit_data	;wreg free
  2922                           
  2923                           ;LCD.c: 13: _delay((unsigned long)((1)*(4000000/4000.0)));
  2924  000DF4  0EFA               	movlw	250
  2925  000DF6                     u837:
  2926  000DF6  F000               	nop	
  2927  000DF8  2EE8               	decfsz	wreg,f,c
  2928  000DFA  D7FD               	goto	u837
  2929                           
  2930                           ;LCD.c: 14: write_8bit_data(0x20) ;
  2931  000DFC  6E13               	movwf	??_init_display& (0+255),c
  2932  000DFE  0E20               	movlw	32
  2933  000E00  6E10               	movwf	?_write_8bit_data,c
  2934  000E02  5013               	movf	??_init_display& (0+255),w,c
  2935  000E04  ECC6  F008         	call	_write_8bit_data	;wreg free
  2936                           
  2937                           ;LCD.c: 15: _delay((unsigned long)((1)*(4000000/4000.0)));
  2938  000E08  0EFA               	movlw	250
  2939  000E0A                     u847:
  2940  000E0A  F000               	nop	
  2941  000E0C  2EE8               	decfsz	wreg,f,c
  2942  000E0E  D7FD               	goto	u847
  2943                           
  2944                           ;LCD.c: 16: write_4bit_data(0x28) ;
  2945  000E10  6E13               	movwf	??_init_display& (0+255),c
  2946  000E12  0E28               	movlw	40
  2947  000E14  6E10               	movwf	?_write_4bit_data,c
  2948  000E16  5013               	movf	??_init_display& (0+255),w,c
  2949  000E18  ECBD  F007         	call	_write_4bit_data	;wreg free
  2950                           
  2951                           ;LCD.c: 17: write_4bit_data(0x08) ;
  2952  000E1C  6E13               	movwf	??_init_display& (0+255),c
  2953  000E1E  0E08               	movlw	8
  2954  000E20  6E10               	movwf	?_write_4bit_data,c
  2955  000E22  5013               	movf	??_init_display& (0+255),w,c
  2956  000E24  ECBD  F007         	call	_write_4bit_data	;wreg free
  2957                           
  2958                           ;LCD.c: 18: write_4bit_data(0x01) ;
  2959  000E28  6E13               	movwf	??_init_display& (0+255),c
  2960  000E2A  0E01               	movlw	1
  2961  000E2C  6E10               	movwf	?_write_4bit_data,c
  2962  000E2E  5013               	movf	??_init_display& (0+255),w,c
  2963  000E30  ECBD  F007         	call	_write_4bit_data	;wreg free
  2964                           
  2965                           ;LCD.c: 19: _delay((unsigned long)((2)*(4000000/4000.0)));
  2966  000E34  0E03               	movlw	3
  2967  000E36  6E13               	movwf	??_init_display& (0+255),c
  2968  000E38  0E97               	movlw	151
  2969  000E3A                     u857:
  2970  000E3A  2EE8               	decfsz	wreg,f,c
  2971  000E3C  D7FE               	goto	u857
  2972  000E3E  2E13               	decfsz	??_init_display& (0+255),f,c
  2973  000E40  D7FC               	goto	u857
  2974  000E42  D000               	nop2	
  2975                           
  2976                           ;LCD.c: 20: write_4bit_data(0x06) ;
  2977  000E44  6E13               	movwf	??_init_display& (0+255),c
  2978  000E46  0E06               	movlw	6
  2979  000E48  6E10               	movwf	?_write_4bit_data,c
  2980  000E4A  5013               	movf	??_init_display& (0+255),w,c
  2981  000E4C  ECBD  F007         	call	_write_4bit_data	;wreg free
  2982                           
  2983                           ;LCD.c: 21: write_4bit_data(0x0C) ;
  2984  000E50  6E13               	movwf	??_init_display& (0+255),c
  2985  000E52  0E0C               	movlw	12
  2986  000E54  6E10               	movwf	?_write_4bit_data,c
  2987  000E56  5013               	movf	??_init_display& (0+255),w,c
  2988  000E58  ECBD  F007         	call	_write_4bit_data	;wreg free
  2989                           
  2990                           ;LCD.c: 22: LATB2 = 1 ;
  2991  000E5C  848A               	bsf	3978,2,c	;volatile
  2992  000E5E  0012               	return	
  2993  000E60                     __end_of_init_display:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           intcon	equ	0xFF2
  3002                           postinc0	equ	0xFEE
  3003                           wreg	equ	0xFE8
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _write_4bit_data *****************
  3011 ;; Defined at:
  3012 ;;		line 35 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  data_to_send    1   15[COMRAM] unsigned char 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  temp            1   17[COMRAM] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;		None               void
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3026 ;;      Params:         1       0       0       0       0       0       0
  3027 ;;      Locals:         1       0       0       0       0       0       0
  3028 ;;      Temps:          1       0       0       0       0       0       0
  3029 ;;      Totals:         3       0       0       0       0       0       0
  3030 ;;Total ram usage:        3 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    2
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_init_display
  3037 ;;		_write_data
  3038 ;;		_write_command
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text20
  3043  000F7A                     __ptext20:
  3044                           	opt stack 0
  3045  000F7A                     _write_4bit_data:
  3046                           	opt stack 25
  3047                           
  3048                           ;LCD.c: 36: unsigned char temp=0;
  3049                           
  3050                           ;incstack = 0
  3051                           ;incstack = 0
  3052  000F7A  6E11               	movwf	??_write_4bit_data& (0+255),c
  3053  000F7C  0E00               	movlw	0
  3054  000F7E  6E12               	movwf	write_4bit_data@temp,c
  3055  000F80  5011               	movf	??_write_4bit_data& (0+255),w,c
  3056                           
  3057                           ;LCD.c: 37: PORTB=PORTB &0x0F;
  3058  000F82  5081               	movf	3969,w,c	;volatile
  3059  000F84  0B0F               	andlw	15
  3060  000F86  6E81               	movwf	3969,c	;volatile
  3061                           
  3062                           ;LCD.c: 38: temp=data_to_send &0xF0;
  3063  000F88  5010               	movf	write_4bit_data@data_to_send,w,c
  3064  000F8A  0BF0               	andlw	240
  3065  000F8C  6E12               	movwf	write_4bit_data@temp,c
  3066                           
  3067                           ;LCD.c: 39: PORTB=PORTB|temp;
  3068  000F8E  5081               	movf	3969,w,c	;volatile
  3069  000F90  1012               	iorwf	write_4bit_data@temp,w,c
  3070  000F92  6E81               	movwf	3969,c	;volatile
  3071                           
  3072                           ;LCD.c: 40: LATB1=1;
  3073  000F94  828A               	bsf	3978,1,c	;volatile
  3074                           
  3075                           ;LCD.c: 41: _delay((unsigned long)((1)*(4000000/4000.0)));
  3076  000F96  0EFA               	movlw	250
  3077  000F98                     u867:
  3078  000F98  F000               	nop	
  3079  000F9A  2EE8               	decfsz	wreg,f,c
  3080  000F9C  D7FD               	goto	u867
  3081                           
  3082                           ;LCD.c: 42: LATB1=0;
  3083  000F9E  928A               	bcf	3978,1,c	;volatile
  3084                           
  3085                           ;LCD.c: 43: data_to_send=data_to_send<<4;
  3086  000FA0  3810               	swapf	write_4bit_data@data_to_send,w,c
  3087  000FA2  0BF0               	andlw	240
  3088  000FA4  6E10               	movwf	write_4bit_data@data_to_send,c
  3089                           
  3090                           ;LCD.c: 44: _delay((unsigned long)((1)*(4000000/4000.0)));
  3091  000FA6  0EFA               	movlw	250
  3092  000FA8                     u877:
  3093  000FA8  F000               	nop	
  3094  000FAA  2EE8               	decfsz	wreg,f,c
  3095  000FAC  D7FD               	goto	u877
  3096                           
  3097                           ;LCD.c: 45: PORTB=PORTB&0x0F;
  3098  000FAE  5081               	movf	3969,w,c	;volatile
  3099  000FB0  0B0F               	andlw	15
  3100  000FB2  6E81               	movwf	3969,c	;volatile
  3101                           
  3102                           ;LCD.c: 46: temp=data_to_send &0xF0;
  3103  000FB4  5010               	movf	write_4bit_data@data_to_send,w,c
  3104  000FB6  0BF0               	andlw	240
  3105  000FB8  6E12               	movwf	write_4bit_data@temp,c
  3106                           
  3107                           ;LCD.c: 47: PORTB=PORTB|temp;
  3108  000FBA  5081               	movf	3969,w,c	;volatile
  3109  000FBC  1012               	iorwf	write_4bit_data@temp,w,c
  3110  000FBE  6E81               	movwf	3969,c	;volatile
  3111                           
  3112                           ;LCD.c: 48: LATB1=1;
  3113  000FC0  828A               	bsf	3978,1,c	;volatile
  3114                           
  3115                           ;LCD.c: 49: _delay((unsigned long)((1)*(4000000/4000.0)));
  3116  000FC2  0EFA               	movlw	250
  3117  000FC4                     u887:
  3118  000FC4  F000               	nop	
  3119  000FC6  2EE8               	decfsz	wreg,f,c
  3120  000FC8  D7FD               	goto	u887
  3121                           
  3122                           ;LCD.c: 50: LATB1=0;
  3123  000FCA  928A               	bcf	3978,1,c	;volatile
  3124  000FCC  0012               	return	
  3125  000FCE                     __end_of_write_4bit_data:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _write_8bit_data *****************
  3143 ;; Defined at:
  3144 ;;		line 26 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\LCD.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  data_to_send    1   15[COMRAM] unsigned char 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;		None               void
  3151 ;; Registers used:
  3152 ;;		wreg
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         1       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0
  3161 ;;      Totals:         1       0       0       0       0       0       0
  3162 ;;Total ram usage:        1 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_init_display
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text21
  3173  00118C                     __ptext21:
  3174                           	opt stack 0
  3175  00118C                     _write_8bit_data:
  3176                           	opt stack 27
  3177                           
  3178                           ;LCD.c: 27: PORTB= data_to_send;
  3179                           
  3180                           ;incstack = 0
  3181                           ;incstack = 0
  3182  00118C  C010  FF81         	movff	write_8bit_data@data_to_send,3969	;volatile
  3183                           
  3184                           ;LCD.c: 28: LATB1 = 1 ;
  3185  001190  828A               	bsf	3978,1,c	;volatile
  3186                           
  3187                           ;LCD.c: 29: _delay((unsigned long)((1)*(4000000/4000.0)));
  3188  001192  0EFA               	movlw	250
  3189  001194                     u897:
  3190  001194  F000               	nop	
  3191  001196  2EE8               	decfsz	wreg,f,c
  3192  001198  D7FD               	goto	u897
  3193                           
  3194                           ;LCD.c: 30: LATB1 = 0 ;
  3195  00119A  928A               	bcf	3978,1,c	;volatile
  3196  00119C  0012               	return	
  3197  00119E                     __end_of_write_8bit_data:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           intcon	equ	0xFF2
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           postinc2	equ	0xFDE
  3209                           postdec2	equ	0xFDD
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _chk_isr *****************
  3215 ;; Defined at:
  3216 ;;		line 18 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;		None               void
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3230 ;;      Params:         0       0       0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0
  3232 ;;      Temps:         14       0       0       0       0       0       0
  3233 ;;      Totals:        14       0       0       0       0       0       0
  3234 ;;Total ram usage:       14 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    1
  3237 ;; This function calls:
  3238 ;;		_INT0_isr
  3239 ;; This function is called by:
  3240 ;;		Interrupt level 2
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	intcode
  3245  000008                     __pintcode:
  3246                           	opt stack 0
  3247  000008                     _chk_isr:
  3248                           	opt stack 25
  3249                           
  3250                           ;incstack = 0
  3251  000008  CFFA F002          	movff	pclath,??_chk_isr
  3252  00000C  CFFB F003          	movff	pclatu,??_chk_isr+1
  3253  000010  CFE9 F004          	movff	fsr0l,??_chk_isr+2
  3254  000014  CFEA F005          	movff	fsr0h,??_chk_isr+3
  3255  000018  CFE1 F006          	movff	fsr1l,??_chk_isr+4
  3256  00001C  CFE2 F007          	movff	fsr1h,??_chk_isr+5
  3257  000020  CFD9 F008          	movff	fsr2l,??_chk_isr+6
  3258  000024  CFDA F009          	movff	fsr2h,??_chk_isr+7
  3259  000028  CFF3 F00A          	movff	prodl,??_chk_isr+8
  3260  00002C  CFF4 F00B          	movff	prodh,??_chk_isr+9
  3261  000030  CFF6 F00C          	movff	tblptrl,??_chk_isr+10
  3262  000034  CFF7 F00D          	movff	tblptrh,??_chk_isr+11
  3263  000038  CFF8 F00E          	movff	tblptru,??_chk_isr+12
  3264  00003C  CFF5 F00F          	movff	tablat,??_chk_isr+13
  3265  000040                     
  3266                           ;main.c: 19: if(INTCONbits.INT0IF==1)
  3267  000040  A2F2               	btfss	intcon,1,c	;volatile
  3268  000042  D001               	goto	i2u70_41
  3269  000044  D001               	goto	i2u70_40
  3270  000046                     i2u70_41:
  3271  000046  D003               	goto	i2l116
  3272  000048                     i2u70_40:
  3273  000048                     
  3274                           ;main.c: 20: INT0_isr();
  3275  000048  ECCF  F008         	call	_INT0_isr	;wreg free
  3276  00004C  D000               	goto	i2l116
  3277  00004E                     i2l116:
  3278  00004E  C00F  FFF5         	movff	??_chk_isr+13,tablat
  3279  000052  C00E  FFF8         	movff	??_chk_isr+12,tblptru
  3280  000056  C00D  FFF7         	movff	??_chk_isr+11,tblptrh
  3281  00005A  C00C  FFF6         	movff	??_chk_isr+10,tblptrl
  3282  00005E  C00B  FFF4         	movff	??_chk_isr+9,prodh
  3283  000062  C00A  FFF3         	movff	??_chk_isr+8,prodl
  3284  000066  C009  FFDA         	movff	??_chk_isr+7,fsr2h
  3285  00006A  C008  FFD9         	movff	??_chk_isr+6,fsr2l
  3286  00006E  C007  FFE2         	movff	??_chk_isr+5,fsr1h
  3287  000072  C006  FFE1         	movff	??_chk_isr+4,fsr1l
  3288  000076  C005  FFEA         	movff	??_chk_isr+3,fsr0h
  3289  00007A  C004  FFE9         	movff	??_chk_isr+2,fsr0l
  3290  00007E  C003  FFFB         	movff	??_chk_isr+1,pclatu
  3291  000082  C002  FFFA         	movff	??_chk_isr,pclath
  3292  000086  0011               	retfie		f
  3293  000088                     __end_of_chk_isr:
  3294                           	opt stack 0
  3295                           pclatu	equ	0xFFB
  3296                           pclath	equ	0xFFA
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           fsr0h	equ	0xFEA
  3306                           fsr0l	equ	0xFE9
  3307                           wreg	equ	0xFE8
  3308                           fsr1h	equ	0xFE2
  3309                           fsr1l	equ	0xFE1
  3310                           postinc2	equ	0xFDE
  3311                           postdec2	equ	0xFDD
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _INT0_isr *****************
  3317 ;; Defined at:
  3318 ;;		line 45 in file "D:\WALEED\live_person\Tahani\bandar\B_stepper\STEPPER\main.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg, status,2
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3332 ;;      Params:         0       0       0       0       0       0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0
  3334 ;;      Temps:          1       0       0       0       0       0       0
  3335 ;;      Totals:         1       0       0       0       0       0       0
  3336 ;;Total ram usage:        1 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_chk_isr
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text23
  3346  00119E                     __ptext23:
  3347                           	opt stack 0
  3348  00119E                     _INT0_isr:
  3349                           	opt stack 25
  3350                           
  3351                           ;main.c: 47: PORTC=0x00;
  3352                           
  3353                           ;incstack = 0
  3354                           ;incstack = 0
  3355  00119E  0E00               	movlw	0
  3356  0011A0  6E82               	movwf	3970,c	;volatile
  3357                           
  3358                           ;main.c: 48: control=0;
  3359  0011A2  6E01               	movwf	??_INT0_isr& (0+255),c
  3360  0011A4  0E00               	movlw	0
  3361  0011A6  6E48               	movwf	_control,c
  3362  0011A8  5001               	movf	??_INT0_isr& (0+255),w,c
  3363                           
  3364                           ;main.c: 49: INTCONbits.INT0IF=0;
  3365  0011AA  92F2               	bcf	intcon,1,c	;volatile
  3366  0011AC  0012               	return	
  3367  0011AE                     __end_of_INT0_isr:
  3368                           	opt stack 0
  3369                           pclatu	equ	0xFFB
  3370                           pclath	equ	0xFFA
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           intcon	equ	0xFF2
  3378                           postinc0	equ	0xFEE
  3379                           fsr0h	equ	0xFEA
  3380                           fsr0l	equ	0xFE9
  3381                           wreg	equ	0xFE8
  3382                           fsr1h	equ	0xFE2
  3383                           fsr1l	equ	0xFE1
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           pclatu	equ	0xFFB
  3390                           pclath	equ	0xFFA
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           postinc0	equ	0xFEE
  3399                           fsr0h	equ	0xFEA
  3400                           fsr0l	equ	0xFE9
  3401                           wreg	equ	0xFE8
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           postinc2	equ	0xFDE
  3405                           postdec2	equ	0xFDD
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410                           	psect	rparam
  3411  0000                     pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        1
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      72
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?___ftpack	float  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 3
		 -> value(COMRAM[3]), 

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 3
		 -> value(COMRAM[3]), 

    ?___awtoft	float  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___lbtoft	float  size(2) Largest target is 0

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> value(COMRAM[3]), 

    send_msg@text	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_caluclation
    _display->_set_address_line1
    _display->_set_address_line2
    _display->_send_msg
    _send_msg->_write_data
    _write_data->_write_4bit_data
    _set_address_line2->_write_command
    _set_address_line1->_write_command
    _write_command->_write_4bit_data
    _caluclation->___asftmul
    ___lbtoft->___ftpack
    ___awtoft->___ftpack
    ___asftmul->___ftmul
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___awtoft
    _init_display->_write_4bit_data

Critical Paths under _chk_isr in COMRAM

    _chk_isr->_INT0_isr

Critical Paths under _main in BANK0

    None.

Critical Paths under _chk_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chk_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chk_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chk_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chk_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chk_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2775
                                             46 COMRAM     1     1      0
                       _init_display
                        _caluclation
                          _Flow_Rate
                               _init
                          _dec_ASCII
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0     420
                                             21 COMRAM     1     1      0
                         _write_data
                  _set_address_line1
                  _set_address_line2
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             2     0      2     120
                                             19 COMRAM     2     0      2
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _write_data                                           1     0      1      90
                                             18 COMRAM     1     0      1
                    _write_4bit_data
 ---------------------------------------------------------------------------------
 (2) _set_address_line2                                    1     0      1     105
                                             20 COMRAM     1     0      1
                      _write_command
 ---------------------------------------------------------------------------------
 (2) _set_address_line1                                    1     0      1     105
                                             20 COMRAM     1     0      1
                      _write_command
 ---------------------------------------------------------------------------------
 (3) _write_command                                        2     1      1      90
                                             18 COMRAM     2     1      1
                    _write_4bit_data
 ---------------------------------------------------------------------------------
 (1) _dec_ASCII                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Flow_Rate                                            2     2      0      15
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _caluclation                                          1     1      0    2250
                                             45 COMRAM     1     1      0
                            ___ftadd
                            ___ftdiv
                          ___asftmul
                            ___ftmul
                           ___awtoft
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             5     2      3     150
                                             23 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     165
                                             15 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3     195
                                             23 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     390
                                             40 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     345
                                             23 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     315
                                             23 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             14     8      6     690
                                             28 COMRAM    14     8      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     135
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _init_display                                         1     1      0      90
                                             18 COMRAM     1     1      0
                    _write_8bit_data
                    _write_4bit_data
 ---------------------------------------------------------------------------------
 (4) _write_4bit_data                                      3     2      1      75
                                             15 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _write_8bit_data                                      1     0      1      15
                                             15 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _chk_isr                                             14    14      0       0
                                              1 COMRAM    14    14      0
                           _INT0_isr
 ---------------------------------------------------------------------------------
 (6) _INT0_isr                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_display
     _write_8bit_data
     _write_4bit_data
   _caluclation
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftpack
     ___asftmul
       ___ftmul
         ___ftpack
     ___ftmul
       ___ftpack
     ___awtoft
       ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _Flow_Rate
   _init
   _dec_ASCII
   _display
     _write_data
       _write_4bit_data
     _set_address_line1
       _write_command
         _write_4bit_data
     _set_address_line2
       _write_command
         _write_4bit_data
     _send_msg
       _write_data
         _write_4bit_data

 _chk_isr (ROOT)
   _INT0_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      48       1       75.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       8       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48       9        0.0%
DATA                 0      0      50      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Jun 07 05:52:13 2014

                            _N 0030                              _i 0041                              _t 0039  
                 ___asftmul@f2 002B                     Flow_Rate@i 0010                   ___ftadd@exp1 002A  
                 ___ftadd@exp2 0029                   ___ftadd@sign 0028                            l122 1124  
                          l141 098E                            l150 09D8                            l142 096C  
                          l145 09C4                            l146 09A2                            l149 09FA  
                          l509 0744                            l518 0760                            l528 0C46  
                          l529 0C6C                            l494 0676                            l498 06A0  
                          u300 0652                            u305 064A                            u500 0BB2  
                          u520 0BEA                            u505 0BAA                            u290 062C  
                          u620 0CBC                            u525 0BE2                            u550 0A96  
                          u295 0624                            u640 0CF8                            u625 0CB4  
                          u570 0ACE                            u555 0A8E                            u645 0CF0  
                          u717 097C                            u807 0DAE                            u575 0AC6  
                          u727 09B2                            u817 0DCA                            u737 09E8  
                          u827 0DE2                            u747 0A46                            u837 0DF6  
                          u757 0A64                            u847 0E0A                            u767 115C  
                          u857 0E3A                            u777 1170                            u867 0F98  
                          u787 1142                            u877 0FA8                            u797 111A  
                          u887 0FC4                            u897 1194                            wreg 000FE8  
                ___asftmul@f1p 0029                   __CFG_LVP$OFF 000000                   ___ftdiv@cntr 0026  
                 ___ftdiv@sign 0028                           l1005 10BA                           l1009 10D0  
                         l1213 0684                           l1037 1118                           l1125 09E2  
                         l1109 09AC                           l1151 0A32                           l1241 06FE  
                         l1137 0A0C                           l1153 0A38                           l1081 0958  
                         l1243 0708                           l1235 06E0                           l1219 06AE  
                         l1411 0D50                           l1139 0A12                           l1181 0E88  
                         l1261 077C                           l1253 0734                           l1245 0710  
                         l1421 0D78                           l1165 0A5E                           l1093 0976  
                         l1191 0EE4                           l1183 0EA6                           l1175 0E70  
                         l1271 07B4                           l1255 073E                           l1247 0716  
                         l1335 0AE8                           l1407 0D40                           l1281 0BCC  
                         l1353 0B2E                           l1329 0AB0                           l1425 0D8E  
                         l1417 0D68                           l1187 0EBC                           l1179 0E7E  
                         l1363 0B5A                           l1419 0D74                           l1189 0EDA  
                         l1349 0B1E                           l1287 0C04                           l1359 0B4A  
                         l1379 0FEA                           l1389 0CDA                           STR_1 0600  
                         STR_2 0607                           _main 0938                   ___ftpack@arg 0010  
                         _init 1012                           _rate 003C                   ___ftpack@exp 0013  
                         _tens 0042                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0088                  __CFG_IESO$OFF 000000  
write_command@command_to_write 0013                   ___ftmul@cntr 0027                   ___ftmul@sign 0028  
  write_8bit_data@data_to_send 0010                   ___fttol@exp1 001E                   ___fttol@lval 001A  
             __end_of_INT0_isr 11AE              ??_write_4bit_data 0011                          ?_main 0001  
                        ?_init 0001                __end_of___ftadd 07DA                __end_of___ftdiv 0C9E  
              __end_of___ftmul 0B94                __end_of___fttol 0DA0                          _LATB1 007C51  
                        _LATB2 007C52                          i2l115 004E                          i2l116 004E  
                        _TENS1 003E                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTC 000F82                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                __end_of_chk_isr 0088                __end_of_display 0F7A  
            ??_write_8bit_data 0011                  ___awtoft@sign 001C             __CFG_MCLRE$EXTMCLR 000000  
                ___ftpack@sign 0014                          _value 0045           __size_of_caluclation 015E  
                        _units 0044                          tablat 000FF5                          status 000FD8  
   __size_of_set_address_line1 0014     __size_of_set_address_line2 0014                __initialization 108C  
                 __end_of_main 0A78                   __end_of_init 1050                         ??_main 002F  
                ___fttol@sign1 0019                         ??_init 0010                  __activetblptr 000001  
      write_data@data_to_write 0013               __end_of___awtoft 1012                         _ANSELA 000F38  
                       _ANSELB 000F39                         _ANSELC 000F3A               __end_of___ftpack 0F18  
             __end_of___lbtoft 110E             __size_of_Flow_Rate 0024                         i2l1433 0040  
                       i2l1435 0048                 __CFG_WDTEN$OFF 000000                  ?_init_display 0001  
                       _OSCCON 000FD3                         _UNITS1 0040                      ??___ftadd 0023  
                    ??___ftdiv 001E                      ??___ftmul 001E                      ??___fttol 0014  
                       clear_0 1092                      ??_chk_isr 0002                         _tenths 0043  
                    ??_display 0016          ___ftmul@f3_as_product 0023               __end_of_send_msg 10E4  
                 __pdataCOMRAM 0048                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8            _Syringe_Calibration 0036  
               ??_init_display 0013             __size_of___asftmul 003C                     __accesstop 0060  
      __end_of__initialization 10AA             __size_of_dec_ASCII 0014                     ___ftadd@f1 001D  
                   ___ftadd@f2 0020                      ?_INT0_isr 0001                     ___ftdiv@f1 0018  
                   ___ftdiv@f2 001B                     ___ftdiv@f3 0023                     ___awtoft@c 0018  
                   ___lbtoft@c 0018                     ___ftmul@f1 0018                     ___ftmul@f2 001B  
                   ___fttol@f1 0010                 __pcstackCOMRAM 0001              __end_of_Flow_Rate 1132  
       __size_of_write_command 001E                     ??_INT0_isr 0001                _write_4bit_data 0F7A  
              _write_8bit_data 118C              __end_of___asftmul 108C                      ?___awtoft 0018  
                    ?___ftpack 0010                      ?___lbtoft 0018              __end_of_dec_ASCII 118C  
                      _TENTHS1 003F                        i2u70_40 0048                        i2u70_41 0046  
                _write_command 1132                        __Hparam 0000                      ?_send_msg 0014  
                      __Lparam 0000    write_4bit_data@data_to_send 0010                        ___ftadd 060E  
                      ___ftdiv 0B94                        ___ftmul 0A78                        ___fttol 0C9E  
                 __psmallconst 0600           __end_of_init_display 0E60                        __pcinit 108C  
                   ??___awtoft 001B                     ??___ftpack 0015                     ??___lbtoft 001B  
                      _chk_isr 0008                        __ramtop 0600                        __ptext0 0938  
                      __ptext1 0F18                        __ptext2 10B8                        __ptext3 11AE  
                      __ptext4 1150                        __ptext5 1164                        __ptext6 1132  
                      __ptext7 1178                        __ptext8 1012                        __ptext9 110E  
                      _display 0F18                        _control 0048                  ??_caluclation 002E  
         end_of_initialization 10AA        __end_of_write_4bit_data 0FCE                 ?_write_command 0013  
                   ??_send_msg 0016        __end_of_write_8bit_data 119E                    _Step_Number 0033  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                    _PORTCbits 000F82                      _TRISBbits 000F93            __end_of_caluclation 0938  
                  ___ftdiv@exp 0027              __size_of_INT0_isr 0010                    ___ftmul@exp 0026  
                   _write_data 11AE                  __pidataCOMRAM 11BC                      _Flow_Rate 110E  
          start_initialization 108C                ??_write_command 0014               ?_write_4bit_data 0010  
             ?_write_8bit_data 0010          __size_of_init_display 00C0                     ?_Flow_Rate 0001  
            __size_of___awtoft 0044              __size_of___ftpack 00B8              __size_of___lbtoft 002A  
                    ___asftmul 1050                    __pbssCOMRAM 0030                      _dec_ASCII 1178  
                  _caluclation 07DA            __end_of__stringdata 060D                   _init_display 0DA0  
                    __pintcode 0008              __size_of_send_msg 002C                       ?___ftadd 001D  
                     ?___ftdiv 0018                       ?___ftmul 0018                       ?___fttol 0010  
                  ?_write_data 0013                       ?_chk_isr 0001                       ?_display 0001  
                  __smallconst 0600                     ?___asftmul 0029                     ?_dec_ASCII 0001  
                     _INT0_isr 119E                    __stringdata 0600                    ??_Flow_Rate 0010  
                 send_msg@text 0014            __size_of_write_data 000E                       __Hrparam 0000  
                     __Lrparam 0000                   __Lsmallconst 0600               __size_of___ftadd 01CC  
             __size_of___ftdiv 010A               __size_of___ftmul 011C               __size_of___fttol 0102  
                     ___awtoft 0FCE                       ___ftpack 0E60                       ___lbtoft 10E4  
             __size_of_chk_isr 0080               __size_of_display 0062                    ??___asftmul 002E  
                  ??_dec_ASCII 0010                       __ptext10 07DA                       __ptext11 10E4  
                     __ptext20 0F7A                       __ptext12 0C9E                       __ptext21 118C  
                     __ptext13 0FCE                       __ptext14 1050                       __ptext23 119E  
                     __ptext15 0A78                       __ptext16 0B94                       __ptext17 060E  
                     __ptext18 0E60                       __ptext19 0DA0            write_4bit_data@temp 0012  
                __size_of_main 0140                  __size_of_init 003E                       _send_msg 10B8  
                   _INTCONbits 000FF2                   ?_caluclation 0001      set_address_line1@position 0015  
                     intlevel2 0000      set_address_line2@position 0015          __end_of_write_command 1150  
            _set_address_line1 1164              _set_address_line2 1150       __size_of_write_4bit_data 0054  
           ?_set_address_line1 0015             ?_set_address_line2 0015                   ??_write_data 0014  
          ??_set_address_line1 0016            ??_set_address_line2 0016       __size_of_write_8bit_data 0012  
    __end_of_set_address_line1 1178      __end_of_set_address_line2 1164              __CFG_FOSC$INTIO67 000000  
           __end_of_write_data 11BC  
